{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"en/","title":"Welcome to SWAT-UQ documentation","text":"<p>SWAT-UQ is an extend project of UQPyL - a comprehensive platform for uncertainty analysis and parameter optimization. This project aims to provide full integration of UQPyL and Soil and Water Assessment Tool (SWAT), enabling users to easily perform sensitivity analysis, single-objective optimization, and multi-objective optimization and so on. </p> <p>There are two available versions of SWAT-UQ, tailored to meet different user needs:</p> <ul> <li> <p>SWAT-UQ-DEV (Develop Version) - Designed for advanced users who require high flexibility and customization in building and managing their modeling workflows.</p> </li> <li> <p>SWAT-UQ-GUI (GUI Version) - Offers an intuitive graphical interface for streamlined operation, ideal for users seeking minimal coding involvement.</p> </li> </ul> <p>With SWAT-UQ, users can seamlessly incorporate powerful uncertainty quantification and optimization capabilities into their SWAT-based hydrological modeling projects.</p>"},{"location":"en/#project-overview","title":"\ud83d\udd17 Project Overview","text":"<ul> <li>Website: Official Site (TODO: Needs update)</li> <li>Source Code: GitHub Repository</li> <li>Documentation: ReadTheDocs</li> <li>Citation Infos: SWAT-UQ (Future Plan)</li> </ul>"},{"location":"en/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ul> <li>Tutorial<ul> <li>SWAT-UQ-DEV</li> <li>SWAT-UQ-GUI</li> </ul> </li> <li>Example Collection<ul> <li>Example 1: Runoff Calibration</li> <li>Example 2: Best Management Practices</li> </ul> </li> </ul>"},{"location":"en/#uq-project-series","title":"\u2b50 UQ Project Series","text":"<ul> <li>UQPyL, a Python package for Uncertainty Quantification and Parameter Optimization.</li> </ul> Overview of UQPyL <ul> <li>SWAT-UQ, providing script-based (Develop) and GUI versions to integrate UQPyL and the Soil and Water Assessment Tool (SWAT) model. </li> </ul> SWAT-UQ GUI Version"},{"location":"en/best_management_practices/","title":"Example 2: Best Management Practices for the Four Lake watershed","text":""},{"location":"en/best_management_practices/#background","title":"Background","text":"<p>When watersheds are impacted by nonpoint source pollution, the integration of the SWAT model with best management practices (BMPs) has proven to be a reliable and effective tool. This example refers to the article(Long et al, 2025). </p> <p>Information about Four Lake watershed</p> <p>The Four Lake watershed locates in the middle reaches of the Yangtze River and the hinterland of the Jianghan Plain. For studying the transportation of water quality in this watershed, we build the SWAT model first. The data set used includes:</p> <ul> <li>DEM - The ASTER GDEM with a spatial resolution of 30 meters</li> <li>Land Use - The CNLUCC (China Land-Use/Cover Change) dataset </li> <li>Soil Data - The Second National Land Survey of Nanjing Soil Institute 1:1 million Soil Counts</li> <li>Meteorological Data - Regional Surface Meteorological Factor-Driven Dataset for China</li> <li>Runoff Observation - Runoff of Hydrographic Yearbook. (2008.1.1 to 2021.12.31)</li> <li>Water Quality Observation - China National Environmental Monitoring Center (2020.11 to 2021.12)</li> </ul> <p>The calibration of runoff and water quality is omitted here, with a primary focus on the process of Best Management Practices (BMPs). In China, Total Nitrogen (TN) and Total Phosphorus (TP) concentrations are critical indicators for assessing lake water quality. The distributions of TN and TP in 2021.12.31 are show blew:</p> <p> </p> <p>The distributions of TN and TP in the Four Lake basin</p> <p>In the SWAT model applied in this study, the main lake is situated within sub-basin 32. Accordingly, particular attention should be directed toward sub-basin 51, which serves as the primary inflow region. Furthermore, management practices should be prioritized in the identified critical source areas, namely sub-basins 1, 13, 14, 20, and 31.</p>"},{"location":"en/best_management_practices/#optimization","title":"Optimization","text":"<p>In SWAT, there are many built-in BMPs, e.g., the terracing operation (BMP1), the tile drainage (BMP2) ... the filter strip (BMP4) ... the grassed waterways (BMP7). </p> <p>For reduce TN and TP, the BMP4 and BMP7 are commonly utilized. Considering the cost, this example only focuses on the critical sub-basins like 1, 13, 14, 20, and 31.</p> <p>The .ops files in SWAT project control and set BMPs to simulated the watershed. The parameters involving the filter strip are:</p> <ul> <li>FILTER_I: Indicator for filter strip simulation (1 for active, 0 for inactive).</li> <li>FILTER_RATIO: The ratio of field area to filter strip area (ha/ha). Range: 0\u2013300.</li> <li>FILTER_CON: Fraction of the HRU area where 10% is densely vegetated and evenly distributed along the filter strip. This 10% area can intercept 25\u201375% of surface runoff.</li> <li>FILTER_CH: Fraction of the 10% dense area occupied by fully channelized flow (dimensionless). Fully channelized flow is not filtered by the strip.</li> </ul> <p>The parameters about grassed waterways are:</p> <ul> <li>GWATI: Indicator for vegetative channel simulation (1 for active, 0 for inactive).</li> <li>GWATN: Manning's roughness coefficient for overland flow within the vegetative channel.</li> <li>GWATSPCON: Linear parameter for calculating sediment transport capacity in the vegetative channel.</li> <li>GWATD: Depth of the vegetative channel (m). If not specified, it is set to 3/64 of GWATW.</li> <li>GWATW: Average width of the vegetative channel (m).</li> <li>GWATL: Length of the vegetative channel (km).</li> <li>GWATS: Average slope of the vegetative channel (m/m).</li> </ul> <p>To simplify the setting of BMPs, this example only optimize five parameters for a sub-basin, i.e., FILTER_I, FILTER_RATIO, GWATI, GWATW, and GWATL, resulting in a total of 25 variables. In addition, the optimization objectives including the reduction of TN and TP loads, as well as the costs associated with these BMPs. Therefore, this example is a multi-objective optimization problem involving a mixture of parameters.</p> <p>The key information (variable types and ranges) of optimization parameters can be concluded as follows:</p> Name Type Range Unit FILTER_I int 0-1 none FILTER_RATIO float 1-300 none GWATI int 0-1 none GWATW discrete 1, 5, 10, 15, 20, 25, 30 m GWATL float 10-1000 km <p>The first step is to prepare the parameter files. In contrast to Example 1, the BMP parameters differ among sub-basins. Consequently, each sub-basin requires an independent definition of all relevant parameters. In addition, the discrete parameter GWATW represents all possible values in the 'Min_Max' field by linking them with an underscore ('_'):</p> <pre><code>GWATW v d 1_5_10_15_20_25_30 1\n</code></pre> <p>The complete parameter file is:</p> <p>File name : <code>para_bmp.par</code></p> <pre><code>Name Mode Type Min_Max Scope\nFILTER_I v i 0_1 1\nFILTER_RATIO v f 1_300 1\nGWATI v i 0_1 1\nGWATW v d 1_5_10_15_20_25_30 1\nGWATL v f 10_1000 1\nFILTER_I v i 0_1 13\nFILTER_RATIO v f 1_300 13\nGWATI v i 0_1 13\nGWATW v d 1_5_10_15_20_25_30 13\nGWATL v f 10_1000 13\nFILTER_I v i 0_1 14\nFILTER_RATIO v f 1_300 14\nGWATI v i 0_1 14\nGWATW v d 1_5_10_15_20_25_30 14\nGWATL v f 10_1000 14\nFILTER_I v i 0_1 20\nFILTER_RATIO v f 1_300 20\nGWATI v i 0_1 20\nGWATW v d 1_5_10_15_20_25_30 20\nGWATL v f 10_1000 20\nFILTER_I v i 0_1 31\nFILTER_RATIO v f 1_300 31\nGWATI v i 0_1 31\nGWATW v d 1_5_10_15_20_25_30 31\nGWATL v f 10_1000 31\n</code></pre> <p>\ud83d\udca1 Noted: This file supports parameters with the same name, as they are distinguished by their indices.</p> <p>Before editing the <code>evl</code> file, three objectives should be introduced. The first objective is the reduction of TN:</p> <p>Obj_1 = \\left ( TN_{base} - TN_{now}\\right ) / TN_{base}</p> <p>where TN_{base} and TN_{now} denote the total amount of TN flowing out of the 51 sub-basin before and after the application of BMPs, respectively.</p> <p>The second objective is the reduction of TP:</p> <p>Obj_2 = \\left ( TP_{base} - TP_{now}\\right ) / TP_{base}</p> <p>where TP_{base} and TP_{now} denote the total amount of TP flowing out of the 51 sub-basin before and after the implementation of BMPs, respectively.</p> <p>The third objective is the cost of BMPs. The unit cost of filter strip is 420 Yuan/ha, while the grassed waterways is 200 Yuan/ha. Therefore, for a sub-basin, the cost is:</p> <p>cost_{filter}^i = Area_{AGRI}^i*FILTER_RATIO*FILTER_I*420</p> <p>cost_{gwat}^i = GWATW* GWATL/10*GWATI*200</p> <p>Obj_3 = \\sum{cost_{filter}^i + cost_{gwat}^i}, i\\in \\left \\{ 1,13,14,20,31 \\right \\}</p> <p>where Area_{AGRI} represents the area of agricultural land use.</p> <p>In this example, the computation of the objectives cannot be performed solely using the <code>*.eval</code> file. However, the necessary data can be obtained from the file, after which the <code>objFunc</code> or <code>conFunc</code> can be defined manually by the user.</p> <p>For the first two objectives, the total amounts of TN and TP flowing out of the sub-basin 51 during 2021 are required.</p> <p>Therefore, the <code>eval</code> file can be:</p> <p>File name : <code>obj_bmp.evl</code></p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_51 : ID of RCH, or SUB, or HRU\nCOL_42 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_7 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n2021.1.1 to 2021.12.31 : \n\nSER_2 : ID of series data\nOBJ_2 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_51 : ID of RCH, or SUB, or HRU\nCOL_43 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_7 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n2021.1.1 to 2021.12.31 : Period for data extraction\n</code></pre> <p>Then, the <code>userObjFunc</code> should be implemented. The <code>userObjFunc</code> would accept a python dict named <code>attr</code> that contain several built-in keywords, e.g., <code>x</code>, <code>objs</code>, <code>cons</code>, <code>objSeries</code>, <code>conSeries</code>, <code>HRUInfos</code>. </p> <p>API: <pre><code>attr -&gt; a python dict\n\nkeywords:\n\n- x : The input decision, np.1darray\n- objs : The objective values of this input decision, a python dict, use `attr['objs'][objID]` defined by the *.evl file\n- cons : Similar to objs\n- objSeries : A python dict records the series defined by the *.evl file, use `attr['objSeries'][objID][serID]`\n- conSeries : Similar to objSeries\n- HRUInfos : A pandas table that records the information about HRU, columns are [\"HRU_ID\", \"SUB_ID\", \"HRU_Local_ID\", \"Slope_Low\", \"Slope_High\", \"Luse\", \"Area\"]\n</code></pre></p> <p>Now, the <code>userObjFunc</code> can be implemented by:</p> <pre><code># Define base total nitrogen (TN) and total phosphorus (TP) loads for normalization\n\nTN_Base = 3.314e7  # Baseline total nitrogen load (unit depends on context)\nTP_Base = 3.717e6  # Baseline total phosphorus load\n\n# Define the list of Basin IDs where BMPs (Best Management Practices) are applied\nBasins = [1, 13, 14, 20, 31]\n\ndef userObjFunc(attr):\n    \"\"\"\n    User-defined objective function.\n\n    Parameters:\n    - attr: dict\n        Contains input decision variables, objective values, constraint values,\n        time series for objectives and constraints, and HRU (Hydrological Response Unit) information.\n\n    Returns:\n    - objs: np.ndarray\n        Array containing computed objective values [obj_1, obj_2, obj_3].\n    \"\"\"\n\n    objs = np.zeros(3)  # Initialize three objective values\n\n    # Extract decision variables (not used directly here, kept for potential future needs)\n    x = attr[\"x\"]\n\n    # Compute the first objective:\n    # Relative reduction in TN load compared to baseline\n    objs[0] = (TN_Base - attr['objs'][1]) / TN_Base\n\n    # Compute the second objective:\n    # Relative reduction in TP load compared to baseline\n    objs[1] = (TP_Base - attr['objs'][2]) / TP_Base\n\n    # Compute the third objective: Total cost of BMP implementations\n    HRUInfosTable = attr[\"HRUInfos\"]  # Extract HRU information table\n\n    cost = 0  # Initialize total cost\n\n    for i, ID in enumerate(Basins):\n        # Calculate the total area of the sub-basin\n        areas = np.sum(\n            HRUInfosTable.loc[\n                (HRUInfosTable.SUB_ID == ID),\n                \"Area\"\n            ].tolist()\n        )\n\n        # Extract BMP design parameters from decision variables\n        filter_I = x[5 * i]       # Filter switch\n        filter_ratio = x[5 * i + 1]  # Fraction of area treated by filter\n        graw_I = x[5 * i + 2]     # Graw BMP switch\n        graw_W = x[5 * i + 3]     # Graw BMP width\n        graw_L = x[5 * i + 4]     # Graw BMP length\n\n        # Calculate the cost of filter BMPs\n        cost_filter = areas * filter_ratio * filter_I * 420  # unit cost: 420 Yuan/ha\n\n        # Calculate the cost of Graw BMPs\n        cost_graw = graw_W * graw_L * graw_I /10 * 200  # unit cost = 200 Yuan/ha\n\n        # Accumulate total cost\n        cost += cost_filter + cost_graw\n\n    objs[2] = cost  # Assign total cost to the third objective\n\n    return objs\n</code></pre> <p>Unitl now, all preparatory work has been completed, and the optimization process can be conducted.</p> <pre><code>import numpy as np\nfrom swatuq import SWAT_UQ\nfrom UQPyL.optimization.multi_objective import NSGAII\n\nnInput = 25\nnOutput = 3\n\nprojectPath = \"E:\\\\BMPs\\\\TxtInOut\" # SWAT Project Path\nexeName = \"swat.exe\" # Name of swat execute program in SWAT Project Path\nworkPath = \"E:\\\\DJ_FSB\" # Work Path\nparaFileName = \"para_bmp.par\" # Name of parameter file in Work Path\nevalFileName = \"obj_bmp.evl\" # Name of evaluation file in Work Path \nspecialFileName = \"special_paras1.txt\" # Name of special parameter file in Work Path\n\nproblem = SWAT_UQ(projectPath = projectPath, swatExeName = exeName, \n                  specialFileName = specialFileName, workPath = workPath, \n                  paraFileName = paraFileName, evalFileName = evalFileName, \n                  verboseFlag = True, numParallel = 10,\n                  userObjFunc = userObjFunc, nOutput = 3, \n                  optType = [\"max\", \"max\", \"min\"])\n\nnsgaii = NSGAII(nPop = 100, maxFEs = 20000, saveFlag = True, verboseFlag = True, verboseFreq = 5)\n\nnsgaii.run(problem = problem)\n\n# The result would be save to `Result\\Data\\NSGAII_SWAT-UQ_D25_M3.hdf`\n</code></pre> <p>The visualization of BMP optimization shows below:</p>"},{"location":"en/example_runoff_calibration/","title":"Example 1: Runoff Calibration for the Dongjiang watershed","text":""},{"location":"en/example_runoff_calibration/#background","title":"Background","text":"<p>The Dongjiang watershed in Guangdong is a critical freshwater source, covering an area of over 35,000 square kilometers. It supplies water to several major cities, including Guangzhou, Shenzhen, and Hong Kong.</p> <p>In this study, we use the Fengshuba and XinFengJiang sub-basins of the Dongjiang watershed as examples for runoff calibration.</p> <p>We primarily present the calibration process for the Fengshuba sub-basin, which has a catchment area of 5,150 km\u00b2 and an average annual rainfall of 1,581 mm. But, for helping users familiar with SWAT-UQ, the calibration of the XinFengJiang sub-basin is provided as an additional exercise.</p>"},{"location":"en/example_runoff_calibration/#swat-modelling","title":"SWAT Modelling","text":"<p>For building SWAT model of Fengshuba sub-basin, the data set used includes:</p> <ul> <li>DEM - The ASTER GDEM with a spatial resolution of 30 meters</li> <li>Land Use - The RESDC (Resource and Environmental Science Data Center) dataset</li> <li>Soil Data - The HWSD (Harmonized World Soil Database)</li> <li> <p>Meteorological Data - The CMADS (China Meteorological Assimilation Driving Dataset)</p> </li> <li> <p>Observation - Runoff of Hydrographic Yearbook. (2008.1.1 to 2017.12.31)</p> </li> </ul> <p>For calibration, the simulation periods are:</p> <ul> <li>Warm up Period - 2008.1.1 to 2011.12.31</li> <li>Calibration Period - 2012.1.1 to 2016.12.31</li> <li>Validation Period - 2017.1.1 to 2017.12.31</li> </ul> <p>\ud83d\udca1 Noted: Click this link to download project files.</p>"},{"location":"en/example_runoff_calibration/#problem-define","title":"Problem Define","text":"<p>The definition of the problem refers to the process of transforming a practical problem into an abstract problem that can be described using mathematical formulas and code. </p> <p>In this example, the ultimate goal is to obtain the SWAT model whose output completely approximate to observed data. First, we need to identify the indicators to evaluate how well the SWAT model has been built. In hydrology, common indicators, e.g., NSE, R2, KGE, RMSE, PCC, and so on. Here, we use the NSE. </p> <p>Therefore, this practical problem can be abstracted into:</p> <p>Where x denotes the undetermined parameters of the SWAT model; NSE(\\cdot) denotes the NSE operation; sim denotes the simulation data obtained from running the SWAT model; ob denotes the observed data from Chinese year book; lb, ub denotes the lower and upper bound of each parameters.</p> <p>Next, based on this abstracted problem, we can describe it using code within the framework of SWAT-UQ.</p>"},{"location":"en/example_runoff_calibration/#sensitivity-analysis","title":"Sensitivity Analysis","text":"<p>First, we would conduct sensitivity analysis (SA) for SWAT model. Refer to SWAT Manual and the article(Liu et al, 2017), following parameters are selected for SA.</p> ID Abbreviation Where Assign Type Range P1 CN2 MGT Relative [-0.4, 0.2] P2 GW_DELAY GW Value [30, 450] P3 ALPHA_BF GW Value [0.0, 1.0] P4 GWQMN GW Value [0.0, 500.0] P5 GW_REVAP GW Value [0.02, 0.20] P6 RCHRG_DP GW Value [0.0, 1.0] P7 SOL_AWC SOL Relative [0.5, 1.5] P8 SOL_K SOL Relative [0.5, 15.0] P9 SOL_ALB SOL Relative [0.01, 5.00] P10 CH_N2 RTE Value [-0.01, 0.30] P11 CH_K2 RTE Value [-0.01, 500.0] P12 ALPHA_BNK RTE Value [0.05, 1.00] P13 TLAPS SUB Value [-10.0, 10.0] P14 SLSUBSSN HRU Relative [0.05, 25.0] P15 HRU_SLP HRU Relative [0.50, 1.50] P16 OV_N HRU Relative [0.10, 15.00] P17 CANMX HRU Value [0.0, 100.0] P18 ESCO HRU Value [0.01, 1.00] P19 EPCO HRU Value [0.01, 1.00] P20 SFTMP BSN Value [-5.0, 5.0] P21 SMTMP BSN Value [-5.0, 5.0] P22 SMFMX BSN Value [0.0, 20.0] P23 SMFMN BSN Value [0.0, 20.0] P24 TIMP BSN Value [0.01, 1.00] <p>As the tutorial introduce, we first prepare the parameter file:</p> <p>File name: <code>paras_sa.par</code></p> <pre><code>Name Mode Type Min_Max Scope\nCN2 r f -0.4_0.2 all\nGW_DELAY v f 30_450 all\nALPHA_BF v f 0.0_1.0 all\nGWQMN v f 0.0_500.0 all\nGW_REVAP v f 0.02_0.20 all\nRCHRG_DP v f 0.0_1.0 all\nSOL_AWC r f 0.5_1.5 all\nSOL_K r f 0.5_15.0 all\nSOL_ALB r f 0.01_5.00 all\nCH_N2 v f -0.01_0.30 all\nCH_K2 v f  -0.01_500.0 all\nALPHA_BNK v f 0.05_1.00 all\nTLAPS v f -10.0_10.0 all\nSLSUBSSN r f 0.05_25.0 all\nHRU_SLP r f 0.50_1.50 all\nOV_N r f 0.10_15.00 all\nCANMX v f 0.0_100.0 all\nESCO v f 0.01_1.00 all\nEPCO v f 0.01_1.00 all\nSFTMP v f -5.0_5.0 all\nSMTMP v f -5.0_5.0 all\nSMFMX v f 0.0_20.0 all\nSMFMN v f 0.0_20.0 all\nTIMP v f 0.01_1.00 all\n</code></pre> <p>Then, the evaluation file should be created:</p> <p>File name: <code>obj_sa.evl</code></p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_23 : ID of RCH, or SUB, or HRU\nCOL_2 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_1 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n\n1   2012 1 1    38.6\n2   2012 1 2    16.2\n3   2012 1 3    24.5\n4   2012 1 4    26.9\n5   2012 1 5    56.2\n6   2012 1 6    82.1\n7   2012 1 7    32.8\n8   2012 1 8    20.5\n9   2012 1 9    32.3\n10  2012 1 10   28.9\n11  2012 1 11   36.5\n...\n...\n...\n1821    2016 12 25  94.8\n1822    2016 12 26  106\n1823    2016 12 27  135\n1824    2016 12 28  87.4\n1825    2016 12 29  81.5\n1826    2016 12 30  94.9\n1827    2016 12 31  89.9\n</code></pre> <p>\ud83d\udca1 Noted: Click this link to download related files(<code>para_sa.par</code> and <code>obj_sa.evl</code>)</p> <p>Based on this evaluation file, SWAT-UQ would extract the data of Reach 23 from <code>output.rch</code> during 2012.1.1 to 2016.12.31. In addition, the NSE function is used to evaluate the performance of model outputs.</p> <p>Finally, we can conduct the sensitivity analysis within python script-based environment:</p> <pre><code>from swat_uq import SWAT_UQ\n\nprojectPath = \"E://swatProjectPath\" # Use your SWAT project path\nworkPath = \"E://workPath\" # Use your work path\nexeName = \"swat2012.exe\" # The exe name you want execute\n\n#Blew two files should be created in the workPath\nparaFileName = \"paras_sa.par\" # the parameter file you prepared\nevalFileName = \"obj_sa.evl\" # the evaluation file you prepared\n\nproblem = SWAT_UQ(\n   projectPath = projectPath, # set projectPath\n   workPath = workPath, # set workPath\n   swatExeName = exeName # set swatExeName\n   paraFileName = paraFileName, # set paraFileName\n   evalFileName = evalFileName, # set evalFileName\n   verboseFlag = True, # enable verboseFlag to check if setup is configured properly.\n   numParallel = 10 # set the parallel numbers of SWAT\n)\n\n# The SWAT-related Problem is completed. \n\n# Perform sensitivity analysis\nfrom UQPyL.sensibility import FAST\n\nfast = FAST()\n\n# Generate sample set\nX = fast.sample(problem = problem, N = 512)\n# Therefore, the shape of X would be (12288, 24). It would be time-consuming to evaluate.\n\n# Recommend: a. use Linux Serve Computer; b. use surrogate-based methods.\n\nY = problem.objFunc(X)\n\nres = fast.analyze(X, Y)\n\nprint(res)\n</code></pre> <p>The analysis results of FAST methods are shown below:</p> <p>We select the top 10 parameters to be calibrated, i.e., CN2, ALPHA_BNK, SOL_K, SLSUBBSN, ESCO, HRU_SLP, OV_N, TLAPS, SOL_ALB, CH_K2.</p>"},{"location":"en/example_runoff_calibration/#optimization","title":"Optimization","text":"<p>Based on the above sensitivity analysis, we need to recreate parameter file:</p> <p>File name: <code>para_op.par</code></p> <pre><code>Name Mode Type Min_Max Scope\nCN2 r f -0.4_0.2 all\nSOL_K r f 0.5_15.0 all\nSOL_ALB r f 0.01_5.00 all\nCH_K2 v f  -0.01_500.0 all\nALPHA_BNK v f 0.05_1.00 all\nTLAPS v f -10.0_10.0 all\nSLSUBSSN r f 0.05_25.0 all\nHRU_SLP r f 0.50_1.50 all\nOV_N r f 0.10_15.00 all\nESCO v f 0.01_1.00 all\n</code></pre> <p>The evaluation file is the same as the SA. But it is a good habit to rename it to <code>obj_op.evl</code></p> <p>\ud83d\udca1 Noted: Click this link to download related files(<code>para_op.par</code>, <code>obj_op.evl</code> and <code>val_op.evl</code> for validation).</p> <p>Finally, we can run the optimization within python script-based environment:</p> <pre><code>from swat_uq import SWAT_UQ\n\nprojectPath = \"E://swatProjectPath\" # Use your SWAT project path\nworkPath = \"E://workPath\" # Use your work path\nexeName = \"swat2012.exe\" # The exe name you want execute\n\n#Blew two files should be created in the workPath\nparaFileName = \"paras_sa.par\" # the parameter file you prepared\nevalFileName = \"obj_sa.evl\" # the evaluation file you prepared\n\nproblem = SWAT_UQ(\n   projectPath = projectPath, # set projectPath\n   workPath = workPath, # set workPath\n   swatExeName = exeName # set swatExeName\n   paraFileName = paraFileName, # set paraFileName\n   evalFileName = evalFileName, # set evalFileName\n   verboseFlag = True, # enable verboseFlag to check if setup is configured properly.\n   numParallel = 10 # set the parallel numbers of SWAT\n)\n\n# The SWAT-related Problem is completed. \n\nfrom UQPyL.optimization import PSO\n\npso = PSO(nPop = 50, maxFEs = 30000, verboseFlag = True, saveFlag = True)\n\npso.run(problem = problem)\n</code></pre> <p>The optimization results show:</p> <p>We list the optimal decision with NSE-&gt;0.88:</p> CN2 SOL_K SOL_ALB CH_K2 ALPHA_BNK TLAPS SLSUBSSN HRU_SLP OV_N ESCO -0.236 14.278 0.325 46.604 1.000 -5.532 1.611 0.515 3.162 0.010"},{"location":"en/example_runoff_calibration/#validation","title":"Validation","text":"<p>We have obtained the optimal parameter settings for the SWAT model. Now, we proceed to perform validation.</p> <p>The evaluation file must first be prepared. Here, we apply the observed data ranging from 2017.1.1 to 2017.12.31.</p> <p>File name: <code>val_op.evl</code></p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_23 : ID of RCH, or SUB, or HRU\nCOL_2 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_1 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n\n1 2017 1 1 74.4\n2 2017 1 2 99.4\n3 2017 1 3 77.4\n...\n...\n365 2017 12 31 19.1\n</code></pre> <p>Using a Python script-based environment, we conduct the validation as follows:</p> <pre><code># optima\nX = np.array([-0.236, 14.278, 0.325, 46.604, 1.000, -5.532, 1.611, 0.515, 3.162, 0.010])\n\n# Perform validation\n# `problem.validate_parameters` expects the optimized parameters and the validation file.\n# It returns a dictionary containing two keys: 'objs' (objective values) and 'cons' (constraint violations).\nres = problem.validate_parameters(X, valFile = \"val_op.evl\") \n\n# Print the objective function values from the validation results\nprint(res[\"objs\"])\n</code></pre>"},{"location":"en/example_runoff_calibration/#postprocessing","title":"Postprocessing","text":"<p>Except for sensitivity analysis and optimization, SWAT-UQ support to extract data from output files.</p> <pre><code>The `series.evl` should be prepared:\nSER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1 : Weight of series combination\nRCH_23  : ID of subbasin to be included in the objective function\nCOL_2 : Column ID of variables in output.rch\nFUNC_10     : Type of objective function (e.g., 1: NSE, 2: RMSE. 3:PCC, 4:Pbias, 5:KGE)\n2012/1/1 to 2016/12/31 : Period for data extraction\n</code></pre> <p>We can extract the data:</p> <pre><code>X = np.array([-0.236, 14.278, 0.325, 46.604, 1.000, -5.532, 1.611, 0.515, 3.162, 0.010])\n\n# Extract the corresponding series data based on the parameter set X\nattr = problem.extract_series(X, seriesFile=\"series.evl\")\n\n# The returned object 'attr' is a Python dictionary.\n# Simulation and observation data are stored separately by function type ('objSeries' or conSeries)objective function ID (objID) and series ID (serID). \n\nsimData = attr['objSeries'][1][1]['sim'] # Simulation data\nobData = attr['objSeries'][1][1]['obs']  # Observation data\n</code></pre>"},{"location":"en/example_runoff_calibration/#apply-optima-to-project","title":"Apply optima to project","text":"<p>Now, we need to apply these values to the project folder:</p> <pre><code># Optimal parameter values\nX = np.array([-0.236, 14.278, 0.325, 46.604, 1.000, -5.532, 1.611, 0.515, 3.162, 0.010])\n\n# Apply parameters\nproblem.apply_parameters(X, replace=False)  \n# Setting 'replace=False' will apply the values to the working directory (workOriginPath) without modifying the original project files.\n\n# Alternatively\nproblem.apply_parameters(X, replace=True)  \n# Setting 'replace=True' will overwrite the original project folder, which is not recommended.\n</code></pre> <p>So far, the calibration work is completed.</p>"},{"location":"en/example_runoff_calibration/#exercise-for-users","title":"Exercise for users","text":"<p>We provide an exercise based on the Xinfengjiang sub-basin, which is part of the Dongjiang watershed.</p> <p>You can download the complete project files here: Click here to download project files</p> <p>Within the downloaded project files, the observed data is stored in the file named <code>observed.txt</code>.</p> <p>If you have any questions or need assistance, feel free to contact us.</p>"},{"location":"en/swat_uq_dev/","title":"SWAT-UQ-DEV","text":""},{"location":"en/swat_uq_dev/#overview-of-dev-version","title":"Overview of DEV Version","text":"<p>SWAT-UQ-DEV is a Python package designed for script-based environments. It designs a Python class named <code>SWAT_UQ</code>, which inherits from <code>Problem</code> class of UQPyL. By instantiating <code>SWAT_UQ</code> class, users can directly access all methods and algorithms offered by UQPyL. In addition, <code>SWAT_UQ</code> contains a suite of built-in functions to streamline and accelerate the process of building and solving practical problems (e.g., model calibration, best management practices).</p> <p>The SWAT-UQ-DEV is particularly suited for users who wish to customize their workflows, integrate with UQPyL, or other Python tools.</p>"},{"location":"en/swat_uq_dev/#key-features","title":"Key Features","text":"<ol> <li> <p>Parallel Execution: Both data I/O operations within project folder and SWAT model simulations support parallelization. ( \ud83c\udf89 Benchmark tests on a 40-core server demonstrate that the current code version can stably run up to 80 SWAT instances concurrently.)</p> </li> <li> <p>File Control: For model calibration tasks \u2014 such as streamflow and water quality,  users only need to prepare a set of <code>.txt</code> files to complete the entire setup process. </p> </li> <li> <p>Workflow Integration: With the support of  UQPyL, users can efficiently carry out the complete modelling-based workflows: sensitivity analysis -&gt; optimization -&gt; back-substitution.</p> </li> </ol>"},{"location":"en/swat_uq_dev/#installation","title":"Installation","text":"<p>Recommended (PyPi or Conda):</p> <pre><code>pip install -U swatuq\n</code></pre> <pre><code>conda install swatuq --upgrade\n</code></pre>"},{"location":"en/swat_uq_dev/#quick-start","title":"Quick Start","text":"<p>Here, we provide a step-by-step guide to solving SWAT-based problems with SWAT-UQ-DEV.</p> <p>To get started, instantiate the <code>SWAT-UQ</code> class, which inherits from the <code>Problem</code> class in UQPyL. This will enable all accesses to methods and algorithms available in UQPyL (see the UQPyL Project).</p> <p>Some preparatory works are required:</p> <p>Step 1: Obtain a SWAT project folder (named SWAT Project Folder for convenience).</p> <p>Step 2: Create separate folder  as Work Folder to store control files for setting up your problems, as well as temporary files used when running the SWAT model in parallel.</p> <p>Step 3: In the Work Folder, create a parameter file encoded in UTF-8. This file would show the details of the parameters you want to analyze or optimize, as shown below:</p> <p>File name: <code>paras.par</code></p> <p>\ud83d\udca1 Noted:  The file name is not restricted, but it is recommended to use the <code>.par</code> extension for consistency with the GUI version. In this file, all elements must be separated by spaces or tabs.</p> <pre><code>Name Type Mode Min_Max Scope\nCN2 r f -0.4_0.2 all\nGW_DELAY v f 30.0_450.0 all\nALPHA_BF v f 0.0_1.0 all\nGWQMN v f 0.0_500.0 all\n... \nSMFMN v f 0.0_20.0 all\nTIMP v f 0.01_1.0 all\nSURLAG v f 0.05_24.0 all\n</code></pre> <p>The first line should be kept as a hint for users.</p> <p>Following line of the parameter file should be structured by <code>Name</code>, <code>Mode</code>, <code>Type</code>, <code>Min_Max</code> and <code>Scope</code>:</p> <ul> <li>Name: Any parameter occurred in <code>.gw</code>, <code>.hru</code>, <code>.mgt</code>, <code>.sol</code>, <code>.rte</code>, <code>.sub</code>, <code>.sep</code>, <code>.swq</code> files can be wrote. The only requirement is that the parameter names used here must exactly match those in the SWAT project file. (Totally support 308 parameters). For parameters in <code>*.sol</code> files, it is possible to modify values for specific layers. For example:</li> </ul> <pre><code>SOL_K(2) r f 0.5_15.0 all    # Modify only the second layer\nSOL_K(3) r f 0.5_15.0 all    # Modify only the third layer\nSOL_K r f 0.5_15.0 all       # Modify all layers\n</code></pre> <ul> <li>Mode: The title 'Mode' means assigning mode of parameters, which is represented by a single character, e.g., <code>r</code>, <code>v</code>, <code>a</code>. </li> <li>where <code>val</code> is the value in this parameter file, and <code>originVal</code> is the origin value of SWAT project files.</li> <li><code>r</code> denotes relative assignment. The true value would be calculated by (1+val)*originVal.</li> <li><code>v</code> denotes absolute assignment, directly use <code>val</code>.</li> <li><code>a</code> denotes for adding assignment, the true value is calculated by originVal+val.</li> <li>Type: The title 'Type' denotes the variable types of parameters, i.e., <code>i</code> - int, <code>f</code> - float, <code>d</code> - discrete.  </li> <li>Min_Maz: The title 'Min' is the lower bound of the parameter. The title 'Max' is the upper bound of the parameter.</li> <li>Scope: The title 'Scope' means the target scope of the parameter. By default, it sets to <code>all</code> - the parameter would be modified globally. Alternatively, you can specify a particular BSN ID or a combination of SUB ID and HRU IDs to apply the parameter selectively. For example:</li> </ul> <pre><code>CN2 r f -0.4_0.2 all # Default Scope\nCN2 r f -0.4_0.2 3(1,2,3,4,5,6,7,8,9) 4(1,2,3,4) 5 # Appoint Scope\n</code></pre> <p>The format follows either:  - <code>SUB ID</code> - apply the parameter to all HRUs within the specified basin  - <code>SUB ID(HRU ID_1, HRU ID_2, ..., HRU ID_N)</code> - apply the parameter to specific HRUs within the given basin</p> <p>Different basin should be separated by spaces or tabs.</p> <p>Step 4: In the Work Folder, create an evaluation file encoded UTF-8, used to construct objective or constraint functions using observed data.</p> <p>File Name: <code>eval.obj</code> </p> <p>\ud83d\udca1 Noted:  It is also recommended to use the <code>.obj</code> extension for consistency with the GUI version.</p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_23 : ID of RCH, or SUB, or HRU\nCOL_2 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_1 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n\n1 2012_1 2.1\n2 2012_2 3.2\n3 2012_3 3.5\n4 2012_4 6.7\n5 2012_5 14.55\n6 2012_6 21.54\n...\n12 2012_12 22.44\n</code></pre> <p>The evaluation file can consists of multiple data series, which may correspond to different locations, output variable, or time periods.</p> <p>In this example, just one data series is shown.</p> <p>Each series consists of two parts: a. Head Definition; b. Data Section.</p> <p>Head Definition: (Following label <code>ID</code> or <code>NUM</code> should be replaced by a number) - SER_ID: The <code>ID</code> should be an unique label for different data series. - OBJ_ID or CON_ID: The <code>OBJ</code> or <code>CON</code> determine the type of the data series. And this <code>ID</code> denotes the unique label of objective or constraint functions.     \ud83d\udca1 Noted: SWAT-UQ-DEV support the multiple series set the same <code>OBJ ID</code> or <code>CON ID</code> - WGT_NUM: The <code>NUM</code> denotes the linear weight for combing series obtaining the same <code>OBJ ID</code> or <code>CON ID</code>. - RCH_ID, SUB_ID or HRU_ID: The <code>RCH</code>, <code>SUB</code> or <code>HRU</code> determine the type of output file loaded. The <code>ID</code> should be consistent with the SWAT project (which RCH, SUB, HRU) and can be set according to your requirements. - COL_NUM: The <code>NUM</code> specifies which data columns to extract from the <code>output.rch</code>, <code>output.hru</code> or <code>output.sub</code> file (Please see following table for checking valid values).  - FUNC_NUM: The <code>NUM</code> defines the objective function type to compare observed and simulated data. (Valid values: 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min)</p> <p>The valid values of <code>COL_NUM</code> (extract variable) in <code>output.rch</code>, <code>output.hru</code>, <code>output.sub</code> can be:</p> File Name Valid Value output.rch 1-FLOW_IN, 2-FLOW_OUT, 3-EVAP, 4-TLOSS, 5-SED_IN, 6-SED_OUT, 8-ORGN_IN, 9-OGRN_OUT, 10-ORGP_IN, 11-ORGP_OUT, 12-NO3_IN, 13-NO3_OUT, 14-NH4-IN, 15-NH4-OUT, 16-NO2_IN, 17-NO2_OUT, 18-MINP_IN, 19-MINP_OUT, 20-CHLA_IN, 21-CHLA_OUT, 22-CBOD_IN, 23-CBOD_OUT ... 38-BACTP_OUT, 39-BACTLP_OUT... 43-TOT_N, 44-TOT_P output.sub 1-PRECIP, 2-SNOMELT, 3-PET, 4-ET, 5-SW, 6-PERC, 7-SURQ, 8-GW_Q, 9-WYLD, 10-SYLD, 11-ORGN, 12-ORGP, 13-NSURQ, 14-SOLP, 15-SEDP output.hru 1-PRECIP, 2-SNOFALL, 3-SNOMELT, 4-IRR, 5-PET, 6-ET, 7-SW_INIT, 8-SW_END, 9-PERA, 10-GW_RCHG, 11-DA_RCHC, 12-REVAP ... 49-NUP, 50-PUP ...67-BACTP, 68-BACTLP <p>\ud83d\udca1 Noted: The numbers above are taken from the SWAT Manual. Alternatively , you can manually count the order of the target variable by checking the output file.</p> <p>Data Section is structured by <code>NUM</code>, <code>YEAR_INDEX</code>, <code>DATA</code>. And there is no need for continuous: - NUM: Not used in SWAT-UQ-DEV, only for data integrity checking. - YEAR_INDEX: The value of <code>YEAR</code> means the year index for the data. The value of <code>INDEX</code> is the day number when SWAT outputs daily data, otherwise the month number, determined by <code>IPRINT</code> in <code>file.cio</code> of SWAT project.  - DATA: The type of data can be int or float.</p> <p>For example: <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_23 : ID of RCH, or SUB, or HRU\nCOL_6 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_1 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n2012/1/1 to 2018/12/31 : Period for data extraction\n</code></pre> Therefore, the period (2012/1/1 to 2018/12/31) would be extracted.</p> <p>Step 5: Build your problem in Python script environment.</p> <p><pre><code># First import SWAT_UQ class\nfrom swatuq import SWAT_UQ\n\n# Second define requirement variables:\n\nprojectPath = \"E://swatProjectPath\"  # your SWAT Project Path\nworkPath = \"E://workPath\" # your Work Path\nexeName = \"swat2012.exe\" # the name of swat.exe you want to run\nparaFileName = \"paras.par\" # the parameter file you prepared\nevalFileName = \"eval.obj\" # the evaluation file you prepared\n\nproblem = SWAT_UQ(\n   projectPath = projectPath, # set projectPath\n   workPath = workPath, # set workPath\n   swatExeName = exeName # set swatExeName\n   paraFileName = paraFileName, # set paraFileName\n   evalFileName = evalFileName, # set evalFileName\n   verboseFlag = True, # enable verboseFlag to check if setup is configured properly.\n   numParallel = 2 # set the number of parallels\n)\n\n# The SWAT-related Problem is completed. You can enjoy all methods and algorithms of UQPyL.\n\n#For example:\nfrom UQPyL.optimization.single_objective import GA\n\nga = GA()\nga.run(problem = problem)\n</code></pre> \ud83d\udca1 Noted: For more detailed usage of UQPyL, please check UQPyL Documentation</p> <p>Step 6: apply optimal parameters to project folder</p> <pre><code># X should be a list or a NumPy 1D or 2D array\nproblem.apply_parameter(X, replace=False)  # Applies parameters X to workOriginPath without modifying the original project files\nproblem.apply_parameter(X, replace=True)   # Applies parameters X directly to the original project directory\n</code></pre>"},{"location":"en/swat_uq_gui/","title":"SWAT-UQ-GUI","text":""},{"location":"en/swat_uq_gui/#overview-of-gui-version","title":"Overview of GUI Version","text":"<p>\ud83d\udca1 Noted: SWAT-UQ-GUI is still in demo stage (Now, we advise to use SWAT-UQ-DEV). Feel free to give it a try \u2014 the full version is on the way!</p> <p>SWAT-UQ-GUI is designed for parameter uncertainty quantification (UQ) of the SWAT model. Its core functionalities are built upon UQPyL, our public released Python package for UQ. A key advantage of this platform is that users do not need to worry about coding. It seamlessly automates complete workflow from sensitivity analysis to parameter optimization, result checking, finally data visualization.</p> <p> </p> <p>Figure 1. Get Start Card</p> <p>SWAT-UQ-GUI consists of three modules corresponding to preparation, execution, and post-processing.  As Figure 1 shows, preparation involves Parameter Setting, Objective Define; Execution includes Sensibility Analysis, Problem Optimization, Result Validation &amp; Apply; Post-processing provide interface for histogram (Visualization A) and point-line figure (Visualization B).</p>"},{"location":"en/swat_uq_gui/#key-features","title":"Key Features","text":"<p>End-to-end visualization: SWAT-UQ-GUI supports fully visualized operations across the entire workflow \u2014 from problem definition and sensitivity analysis to optimization and final result validation.</p> <p>Modular &amp; Extensible Architecture: SWAT-UQ-GUI adopts a modular structure that's easy to extend \u2014 new methods and tools can be integrated without disrupting existing workflows.</p>"},{"location":"en/swat_uq_gui/#quick-start","title":"Quick Start","text":"<p>Here, we provide a Quick Start. In future plans, we will provide detailed documentation and videos.</p> <p>Please choose the latest release version of SWAT-UQ.</p> <p>Demo Version has been released: SWAT-UQ</p> <p>Step1: On the Get Started interface, click the New Project card to create a project or the Open Project card to open an existing one. You can also select the Example card for reference cases or the Help card for assistance.</p> <p> </p> <p>Figure 2. New Project Card and Open Project Card</p> <p>For the New Project Card (left picture of Figure 2), users need to provide the following information: the UQ Project name, the UQ Project path, and the SWAT Project path. After these inputs are provided, the program will verify the validity of the SWAT project files. If the verification is successful, other modules will be activated. Once the UQ Project is created, a project file named *.prj (where * represents the UQ Project name set by the user) will be saved in the specified UQ Project path.  </p> <p>For the Open Project Card (right picture of Figure 2), users should select the folder that contains *.prj files. SWAT-UQ will then check the validity of the project file before proceeding.  </p> <p>Step2: On the Parameter Setting and Objective Definition, the parameter file (.par) and the objective file (.obj) should be created. These files are crucial as they specify which parameters will be modified and what objectives will be evaluated by the program.</p> <p> </p> <p>Figure 3. Parameter Setting Card and Figure 4. Objective Define Card</p> <p>To be specific, as shown in Figure 3, the Parameter Setting Card enables users to define the parameters they wish to tune. There are two ways to add parameters to the information table: either by importing them from an existing file or by clicking the Add button to open the Parameter Selection widget. In this table, all selectable parameters are organized by the suffix of the SWAT project files. Additionally, the search bar provides a convenient way to locate specific parameters quickly.</p> <p></p> <p>Figure 4. Parameter Setting Table </p> <p>After adding parameters, users can set the tuning mode, lower and upper bounds, and specify tuning files (default: all) for each parameter (Figure 3 shows). Finally, these settings should be saved to the UQ project folder by clicking \"Saving Current Parameter\" button.</p> <p>There are also two ways to define the objective function: by importing from existing files or by user definition. For user definition, you should click \"Add\" button. </p> <p></p> <p>Figure 5. Objective Define Table </p> <p>As shown in Figure 5, users need to accurately fill in the objective ID, series ID, objective type, variable type, weight, and other relevant information. It is important to note that both the series ID and objective ID can be repeated, allowing for combinations of multiple series or weighted combinations of series. For more details, please refer to the comprehensive documentation.</p> <p>After defining objectives, you can save them to the objective file. It is also allowed to define multiple objective functions within a single file.</p> <p>Step3: Perform sensitivity analysis or parameter optimization as needed. </p> <p>Using Sensitivity Analysis as an example, as shown in the left image of Figure 6, users should first select the parameter file and objective file. Next, they choose the desired sensitivity analysis method and sampling technique. Users can then configure additional settings as required, fine-tuning the hyper-parameters to best meet project needs before proceeding. SWAT-UQ thoughtfully displays the number of parameters and the total sample size to assist users in making informed decisions.</p> <p>Once all initial settings are all ready, click the \"Next\" button to proceed to the simulation and analysis process. The right image of Figure 6 displays the settings of simulation, including the selection of SWAT executable file, parallel numbers and problem name. Finally, click the \"Initialize,\" \"Sampling,\" and \"Simulation\" buttons in sequence, and wait for simulation completing. SWAT-UQ can display the simulation progress in real-time, and users can also pause it to reconfigure settings. It would save the analysis result into UQ project folder (./Result/data/). The result file would be used to check or draw visualization picture.</p> <p> </p> <p> Figure 6. Sensibility Analysis Interface </p> <p>For parameter optimization, users should still select parameter file and objective file at first. When users check more than two objectives, the multi-objective optimization would be activated; conversely, if only one objective is selected, single-objective optimization is used. After fine-tuning hyper-parameters, the optimization process would be started, like sensibility analysis. SWAT-UQ can display the optimization progress in real-time, along with the optimal parameter values for each iteration.</p> <p> </p> <p> Figure 7. Parameter Optimization Interface </p> <p>Here, we list the available sensibility analysis method and optimization method.</p> <p>Sensibility Analysis: - Sobol' - Delta Test (DT) #TODO - Extended Fourier Amplitude Sensitivity Test (eFAST) - Random Balance Designs - Fourier Amplitude Sensitivity Test (RBD-FAST) - Multivariate Adaptive Regression Splines-Sensitivity Analysis (MARS-SA) #TODO - Morris - Regional Sensitivity Analysis (RSA)</p> <p>Optimization Algorithm: ( indicates solving computational expensive optimization problem) - Single Objective Optimization: SCE-UA, ML-SCE-UA, GA, CSA, PSO, DE, ABC, ASMO (#TODO), EGO (#TODO) - Multi-Objective Optimization: MOEA/D, NSGA-II, RVEA, MOASMO (#TODO)</p> <p>Step 4: Result Validation and Apply. On Result Validation &amp; Apply interface, SWAT-UQ allows users to simulate a specific set of parameters individually and extract the desired time series data, or apply the optimal parameters directly to the SWAT project files. This parameter set can be user-defined or sourced from completed optimization result files.</p> <p></p> <p> Figure 8. Result Validation Interface </p> <p>Step 5: Result Visualization. The current SWAT-UQ provides two types of plot pictures: a bar chart for sensitivity analysis (Visualization A Interface) and an iteration convergence plot for parameter optimization (Visualization B Interface). Of course, additional types of plots will be continuously added in future versions. Figures 9 and 10 shows the visualization pictures from two interfaces.</p> <p></p> <p> Figure 9. Sensibility Analysis Visualization </p> <p></p> <p> Figure 10. Optimization Visualization </p> <p>Specifically, On the Visualization A and Visualization B, user can select the result file. SWAT-UQ would generates initial visualizations. Users can click the \"Config\" button to open the settings panel and tune various parameters of the plot based on the preset values, as Figure 11 indicates.</p> <p> </p> <p> Figure 11. Visualization Interface </p> <p>This concludes the Quick Start section for SWAT-UQ. For more advanced operations, please refer to the documentation.</p>"},{"location":"zh/","title":"\u6b22\u8fce\u4f7f\u7528 SWAT-UQ \u4e2d\u6587\u6587\u6863","text":"<p>SWAT-UQ \u662f UQPyL \u9879\u76ee\u7684\u6269\u5c55\u7248\u672c\uff0cUQPyL\u662f\u4e00\u4e2a\u529f\u80fd\u5168\u9762\u7684\u4e0d\u786e\u5b9a\u6027\u5206\u6790\u4e0e\u53c2\u6570\u4f18\u5316\u5e73\u53f0\u3002SWAT-UQ\u7684\u76ee\u6807\u662f\u5c06UQPyL\u4e0eSWAT\u65e0\u7f1d\u96c6\u6210\uff0c\u4f7f\u7528\u6237\u80fd\u591f\u8f7b\u677e\u5f00\u5c55\u654f\u611f\u6027\u5206\u6790\u3001\u5355\u76ee\u6807\u4f18\u5316\u3001\u591a\u76ee\u6807\u4f18\u5316\u7b49\u4efb\u52a1\u3002</p> <p>\u76ee\u524d SWAT-UQ \u63d0\u4f9b\u4e24\u4e2a\u7248\u672c\uff0c\u6ee1\u8db3\u4e0d\u540c\u7c7b\u578b\u7528\u6237\u7684\u9700\u6c42\uff1a</p> <ul> <li>SWAT-UQ-DEV\uff08\u5f00\u53d1\u8005\u7248\u672c\uff09\uff1a\u9002\u7528\u4e8e\u9700\u8981\u9ad8\u5ea6\u7075\u6d3b\u6027\u548c\u81ea\u5b9a\u4e49\u5efa\u6a21\u6d41\u7a0b\u7684\u9ad8\u7ea7\u7528\u6237\u3002</li> <li>SWAT-UQ-GUI\uff08\u56fe\u5f62\u754c\u9762\u7248\u672c\uff09\uff1a\u63d0\u4f9b\u76f4\u89c2\u7684\u56fe\u5f62\u5316\u754c\u9762\uff0c\u7b80\u5316\u64cd\u4f5c\u6d41\u7a0b\uff0c\u9002\u5408\u5e0c\u671b\u5c3d\u91cf\u51cf\u5c11\u7f16\u7a0b\u7684\u7528\u6237\u3002</li> </ul> <p>\u501f\u52a9SWAT-UQ\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u5f3a\u5927\u7684\u4e0d\u786e\u5b9a\u6027\u5206\u6790\u4e0e\u4f18\u5316\u529f\u80fd\u65e0\u7f1d\u878d\u5165\u57fa\u4e8eSWAT\u7684\u6c34\u6587\u5efa\u6a21\u9879\u76ee\u4e2d\u3002</p>"},{"location":"zh/#_1","title":"\ud83d\udd17 \u9879\u76ee\u6982\u89c8","text":"<ul> <li>\u5b98\u7f51\uff1a\u5b98\u65b9\u7f51\u7ad9\uff08\u5f85\u66f4\u65b0\uff09</li> <li>\u6e90\u4ee3\u7801\uff1aGitHub \u4ed3\u5e93</li> <li>\u6587\u6863\u8d44\u6599\uff1a\u67e5\u770b\u6587\u6863</li> <li>\u5f15\u7528\u4fe1\u606f\uff1aSWAT-UQ\uff08\u672a\u6765\u8ba1\u5212\u4e2d\uff09</li> </ul>"},{"location":"zh/#_2","title":"\ud83d\ude80 \u5feb\u901f\u5165\u95e8","text":"<ul> <li>\u6559\u7a0b<ul> <li>SWAT-UQ-DEV \u4f7f\u7528\u6559\u7a0b</li> <li>SWAT-UQ-GUI \u4f7f\u7528\u6559\u7a0b</li> </ul> </li> <li>\u793a\u4f8b\u96c6\u5408<ul> <li>\u793a\u4f8b\u4e00\uff1a\u5f84\u6d41\u6821\u51c6</li> <li>\u793a\u4f8b\u4e8c\uff1a\u6700\u4f73\u5de5\u7a0b\u7ba1\u7406</li> </ul> </li> </ul>"},{"location":"zh/#uq","title":"\u2b50 UQ \u9879\u76ee\u7cfb\u5217","text":"<ul> <li>UQPyL\uff1a\u7528\u4e8e\u4e0d\u786e\u5b9a\u6027\u91cf\u5316\u4e0e\u53c2\u6570\u4f18\u5316\u7684 Python \u5de5\u5177\u5305\u3002</li> </ul> UQPyL\u529f\u80fd\u603b\u89c8 <ul> <li>SWAT-UQ\uff1a\u901a\u8fc7\u811a\u672c\u5f00\u53d1\u7248\u4e0e\u56fe\u5f62\u754c\u9762\u7248\uff0c\u5c06UQPyL\u4e0eSWAT\u6a21\u578b\u6709\u673a\u878d\u5408\u3002</li> </ul> SWAT-UQ\u56fe\u5f62\u754c\u9762\u7248\u672c"},{"location":"zh/best_management_practices/","title":"Example 2: Best Management Practices for the Four Lake watershed","text":""},{"location":"zh/best_management_practices/#background","title":"Background","text":"<p>When watersheds are impacted by nonpoint source pollution, the integration of the SWAT model with best management practices (BMPs) has proven to be a reliable and effective tool. This example refers to the article(Long et al, 2025). </p> <p>Information about Four Lake watershed</p> <p>The Four Lake watershed locates in the middle reaches of the Yangtze River and the hinterland of the Jianghan Plain. For studying the transportation of water quality in this watershed, we build the SWAT model first. The data set used includes:</p> <ul> <li>DEM - The ASTER GDEM with a spatial resolution of 30 meters</li> <li>Land Use - The CNLUCC (China Land-Use/Cover Change) dataset </li> <li>Soil Data - The Second National Land Survey of Nanjing Soil Institute 1:1 million Soil Counts</li> <li>Meteorological Data - Regional Surface Meteorological Factor-Driven Dataset for China</li> <li>Runoff Observation - Runoff of Hydrographic Yearbook. (2008.1.1 to 2021.12.31)</li> <li>Water Quality Observation - China National Environmental Monitoring Center (2020.11 to 2021.12)</li> </ul> <p>The calibration of runoff and water quality is omitted here, with a primary focus on the process of Best Management Practices (BMPs). In China, Total Nitrogen (TN) and Total Phosphorus (TP) concentrations are critical indicators for assessing lake water quality. The distributions of TN and TP in 2021.12.31 are show blew:</p> <p> </p> <p>The distributions of TN and TP in the Four Lake basin</p> <p>In the SWAT model applied in this study, the main lake is situated within sub-basin 32. Accordingly, particular attention should be directed toward sub-basin 51, which serves as the primary inflow region. Furthermore, management practices should be prioritized in the identified critical source areas, namely sub-basins 1, 13, 14, 20, and 31.</p>"},{"location":"zh/best_management_practices/#optimization","title":"Optimization","text":"<p>In SWAT, there are many built-in BMPs, e.g., the terracing operation (BMP1), the tile drainage (BMP2) ... the filter strip (BMP4) ... the grassed waterways (BMP7). </p> <p>For reduce TN and TP, the BMP4 and BMP7 are commonly utilized. Considering the cost, this example only focuses on the critical sub-basins like 1, 13, 14, 20, and 31.</p> <p>The .ops files in SWAT project control and set BMPs to simulated the watershed. The parameters involving the filter strip are:</p> <ul> <li>FILTER_I: Indicator for filter strip simulation (1 for active, 0 for inactive).</li> <li>FILTER_RATIO: The ratio of field area to filter strip area (ha/ha). Range: 0\u2013300.</li> <li>FILTER_CON: Fraction of the HRU area where 10% is densely vegetated and evenly distributed along the filter strip. This 10% area can intercept 25\u201375% of surface runoff.</li> <li>FILTER_CH: Fraction of the 10% dense area occupied by fully channelized flow (dimensionless). Fully channelized flow is not filtered by the strip.</li> </ul> <p>The parameters about grassed waterways are:</p> <ul> <li>GWATI: Indicator for vegetative channel simulation (1 for active, 0 for inactive).</li> <li>GWATN: Manning's roughness coefficient for overland flow within the vegetative channel.</li> <li>GWATSPCON: Linear parameter for calculating sediment transport capacity in the vegetative channel.</li> <li>GWATD: Depth of the vegetative channel (m). If not specified, it is set to 3/64 of GWATW.</li> <li>GWATW: Average width of the vegetative channel (m).</li> <li>GWATL: Length of the vegetative channel (km).</li> <li>GWATS: Average slope of the vegetative channel (m/m).</li> </ul> <p>To simplify the setting of BMPs, this example only optimize five parameters for a sub-basin, i.e., FILTER_I, FILTER_RATIO, GWATI, GWATW, and GWATL, resulting in a total of 25 variables. In addition, the optimization objectives including the reduction of TN and TP loads, as well as the costs associated with these BMPs. Therefore, this example is a multi-objective optimization problem involving a mixture of parameters.</p> <p>The key information (variable types and ranges) of optimization parameters can be concluded as follows:</p> Name Type Range Unit FILTER_I int 0-1 none FILTER_RATIO float 1-300 none GWATI int 0-1 none GWATW discrete 1, 5, 10, 15, 20, 25, 30 m GWATL float 10-1000 km <p>The first step is to prepare the parameter files. In contrast to Example 1, the BMP parameters differ among sub-basins. Consequently, each sub-basin requires an independent definition of all relevant parameters. In addition, the discrete parameter GWATW represents all possible values in the 'Min_Max' field by linking them with an underscore ('_'):</p> <pre><code>GWATW v d 1_5_10_15_20_25_30 1\n</code></pre> <p>The complete parameter file is:</p> <p>File name : <code>para_bmp.par</code></p> <pre><code>Name Mode Type Min_Max Scope\nFILTER_I v i 0_1 1\nFILTER_RATIO v f 1_300 1\nGWATI v i 0_1 1\nGWATW v d 1_5_10_15_20_25_30 1\nGWATL v f 10_1000 1\nFILTER_I v i 0_1 13\nFILTER_RATIO v f 1_300 13\nGWATI v i 0_1 13\nGWATW v d 1_5_10_15_20_25_30 13\nGWATL v f 10_1000 13\nFILTER_I v i 0_1 14\nFILTER_RATIO v f 1_300 14\nGWATI v i 0_1 14\nGWATW v d 1_5_10_15_20_25_30 14\nGWATL v f 10_1000 14\nFILTER_I v i 0_1 20\nFILTER_RATIO v f 1_300 20\nGWATI v i 0_1 20\nGWATW v d 1_5_10_15_20_25_30 20\nGWATL v f 10_1000 20\nFILTER_I v i 0_1 31\nFILTER_RATIO v f 1_300 31\nGWATI v i 0_1 31\nGWATW v d 1_5_10_15_20_25_30 31\nGWATL v f 10_1000 31\n</code></pre> <p>\ud83d\udca1 Noted: This file supports parameters with the same name, as they are distinguished by their indices.</p> <p>Before editing the <code>evl</code> file, three objectives should be introduced. The first objective is the reduction of TN:</p> <p>Obj_1 = \\left ( TN_{base} - TN_{now}\\right ) / TN_{base}</p> <p>where TN_{base} and TN_{now} denote the total amount of TN flowing out of the 51 sub-basin before and after the application of BMPs, respectively.</p> <p>The second objective is the reduction of TP:</p> <p>Obj_2 = \\left ( TP_{base} - TP_{now}\\right ) / TP_{base}</p> <p>where TP_{base} and TP_{now} denote the total amount of TP flowing out of the 51 sub-basin before and after the implementation of BMPs, respectively.</p> <p>The third objective is the cost of BMPs. The unit cost of filter strip is 420 Yuan/ha, while the grassed waterways is 200 Yuan/ha. Therefore, for a sub-basin, the cost is:</p> <p>cost_{filter}^i = Area_{AGRI}^i*FILTER_RATIO*FILTER_I*420</p> <p>cost_{gwat}^i = GWATW* GWATL/10*GWATI*200</p> <p>Obj_3 = \\sum{cost_{filter}^i + cost_{gwat}^i}, i\\in \\left \\{ 1,13,14,20,31 \\right \\}</p> <p>where Area_{AGRI} represents the area of agricultural land use.</p> <p>In this example, the computation of the objectives cannot be performed solely using the <code>*.eval</code> file. However, the necessary data can be obtained from the file, after which the <code>objFunc</code> or <code>conFunc</code> can be defined manually by the user.</p> <p>For the first two objectives, the total amounts of TN and TP flowing out of the sub-basin 51 during 2021 are required.</p> <p>Therefore, the <code>eval</code> file can be:</p> <p>File name : <code>obj_bmp.evl</code></p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_51 : ID of RCH, or SUB, or HRU\nCOL_42 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_7 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n2021.1.1 to 2021.12.31 : \n\nSER_2 : ID of series data\nOBJ_2 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_51 : ID of RCH, or SUB, or HRU\nCOL_43 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_7 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n2021.1.1 to 2021.12.31 : Period for data extraction\n</code></pre> <p>Then, the <code>userObjFunc</code> should be implemented. The <code>userObjFunc</code> would accept a python dict named <code>attr</code> that contain several built-in keywords, e.g., <code>x</code>, <code>objs</code>, <code>cons</code>, <code>objSeries</code>, <code>conSeries</code>, <code>HRUInfos</code>. </p> <p>API: <pre><code>attr -&gt; a python dict\n\nkeywords:\n\n- x : The input decision, np.1darray\n- objs : The objective values of this input decision, a python dict, use `attr['objs'][objID]` defined by the *.evl file\n- cons : Similar to objs\n- objSeries : A python dict records the series defined by the *.evl file, use `attr['objSeries'][objID][serID]`\n- conSeries : Similar to objSeries\n- HRUInfos : A pandas table that records the information about HRU, columns are [\"HRU_ID\", \"SUB_ID\", \"HRU_Local_ID\", \"Slope_Low\", \"Slope_High\", \"Luse\", \"Area\"]\n</code></pre></p> <p>Now, the <code>userObjFunc</code> can be implemented by:</p> <pre><code># Define base total nitrogen (TN) and total phosphorus (TP) loads for normalization\n\nTN_Base = 3.314e7  # Baseline total nitrogen load (unit depends on context)\nTP_Base = 3.717e6  # Baseline total phosphorus load\n\n# Define the list of Basin IDs where BMPs (Best Management Practices) are applied\nBasins = [1, 13, 14, 20, 31]\n\ndef userObjFunc(attr):\n    \"\"\"\n    User-defined objective function.\n\n    Parameters:\n    - attr: dict\n        Contains input decision variables, objective values, constraint values,\n        time series for objectives and constraints, and HRU (Hydrological Response Unit) information.\n\n    Returns:\n    - objs: np.ndarray\n        Array containing computed objective values [obj_1, obj_2, obj_3].\n    \"\"\"\n\n    objs = np.zeros(3)  # Initialize three objective values\n\n    # Extract decision variables (not used directly here, kept for potential future needs)\n    x = attr[\"x\"]\n\n    # Compute the first objective:\n    # Relative reduction in TN load compared to baseline\n    objs[0] = (TN_Base - attr['objs'][1]) / TN_Base\n\n    # Compute the second objective:\n    # Relative reduction in TP load compared to baseline\n    objs[1] = (TP_Base - attr['objs'][2]) / TP_Base\n\n    # Compute the third objective: Total cost of BMP implementations\n    HRUInfosTable = attr[\"HRUInfos\"]  # Extract HRU information table\n\n    cost = 0  # Initialize total cost\n\n    for i, ID in enumerate(Basins):\n        # Calculate the total area of the sub-basin\n        areas = np.sum(\n            HRUInfosTable.loc[\n                (HRUInfosTable.SUB_ID == ID),\n                \"Area\"\n            ].tolist()\n        )\n\n        # Extract BMP design parameters from decision variables\n        filter_I = x[5 * i]       # Filter switch\n        filter_ratio = x[5 * i + 1]  # Fraction of area treated by filter\n        graw_I = x[5 * i + 2]     # Graw BMP switch\n        graw_W = x[5 * i + 3]     # Graw BMP width\n        graw_L = x[5 * i + 4]     # Graw BMP length\n\n        # Calculate the cost of filter BMPs\n        cost_filter = areas * filter_ratio * filter_I * 420  # unit cost: 420 Yuan/ha\n\n        # Calculate the cost of Graw BMPs\n        cost_graw = graw_W * graw_L * graw_I /10 * 200  # unit cost = 200 Yuan/ha\n\n        # Accumulate total cost\n        cost += cost_filter + cost_graw\n\n    objs[2] = cost  # Assign total cost to the third objective\n\n    return objs\n</code></pre> <p>Unitl now, all preparatory work has been completed, and the optimization process can be conducted.</p> <pre><code>import numpy as np\nfrom swatuq import SWAT_UQ\nfrom UQPyL.optimization.multi_objective import NSGAII\n\nnInput = 25\nnOutput = 3\n\nprojectPath = \"E:\\\\BMPs\\\\TxtInOut\" # SWAT Project Path\nexeName = \"swat.exe\" # Name of swat execute program in SWAT Project Path\nworkPath = \"E:\\\\DJ_FSB\" # Work Path\nparaFileName = \"para_bmp.par\" # Name of parameter file in Work Path\nevalFileName = \"obj_bmp.evl\" # Name of evaluation file in Work Path \nspecialFileName = \"special_paras1.txt\" # Name of special parameter file in Work Path\n\nproblem = SWAT_UQ(projectPath = projectPath, swatExeName = exeName, \n                  specialFileName = specialFileName, workPath = workPath, \n                  paraFileName = paraFileName, evalFileName = evalFileName, \n                  verboseFlag = True, numParallel = 10,\n                  userObjFunc = userObjFunc, nOutput = 3, \n                  optType = [\"max\", \"max\", \"min\"])\n\nnsgaii = NSGAII(nPop = 100, maxFEs = 20000, saveFlag = True, verboseFlag = True, verboseFreq = 5)\n\nnsgaii.run(problem = problem)\n\n# The result would be save to `Result\\Data\\NSGAII_SWAT-UQ_D25_M3.hdf`\n</code></pre> <p>The visualization of BMP optimization shows below:</p>"},{"location":"zh/example_runoff_calibration/","title":"Example 1: Runoff Calibration for the Dongjiang watershed","text":""},{"location":"zh/example_runoff_calibration/#background","title":"Background","text":"<p>The Dongjiang watershed in Guangdong is a critical freshwater source, covering an area of over 35,000 square kilometers. It supplies water to several major cities, including Guangzhou, Shenzhen, and Hong Kong.</p> <p>In this study, we use the Fengshuba and XinFengJiang sub-basins of the Dongjiang watershed as examples for runoff calibration.</p> <p>We primarily present the calibration process for the Fengshuba sub-basin, which has a catchment area of 5,150 km\u00b2 and an average annual rainfall of 1,581 mm. But, for helping users familiar with SWAT-UQ, the calibration of the XinFengJiang sub-basin is provided as an additional exercise.</p>"},{"location":"zh/example_runoff_calibration/#swat-modelling","title":"SWAT Modelling","text":"<p>For building SWAT model of Fengshuba sub-basin, the data set used includes:</p> <ul> <li>DEM - The ASTER GDEM with a spatial resolution of 30 meters</li> <li>Land Use - The RESDC (Resource and Environmental Science Data Center) dataset</li> <li>Soil Data - The HWSD (Harmonized World Soil Database)</li> <li> <p>Meteorological Data - The CMADS (China Meteorological Assimilation Driving Dataset)</p> </li> <li> <p>Observation - Runoff of Hydrographic Yearbook. (2008.1.1 to 2017.12.31)</p> </li> </ul> <p>For calibration, the simulation periods are:</p> <ul> <li>Warm up Period - 2008.1.1 to 2011.12.31</li> <li>Calibration Period - 2012.1.1 to 2016.12.31</li> <li>Validation Period - 2017.1.1 to 2017.12.31</li> </ul> <p>\ud83d\udca1 Noted: Click this link to download project files.</p>"},{"location":"zh/example_runoff_calibration/#problem-define","title":"Problem Define","text":"<p>The definition of the problem refers to the process of transforming a practical problem into an abstract problem that can be described using mathematical formulas and code. </p> <p>In this example, the ultimate goal is to obtain the SWAT model whose output completely approximate to observed data. First, we need to identify the indicators to evaluate how well the SWAT model has been built. In hydrology, common indicators, e.g., NSE, R2, KGE, RMSE, PCC, and so on. Here, we use the NSE. </p> <p>Therefore, this practical problem can be abstracted into:</p> <p>Where x denotes the undetermined parameters of the SWAT model; NSE(\\cdot) denotes the NSE operation; sim denotes the simulation data obtained from running the SWAT model; ob denotes the observed data from Chinese year book; lb, ub denotes the lower and upper bound of each parameters.</p> <p>Next, based on this abstracted problem, we can describe it using code within the framework of SWAT-UQ.</p>"},{"location":"zh/example_runoff_calibration/#sensitivity-analysis","title":"Sensitivity Analysis","text":"<p>First, we would conduct sensitivity analysis (SA) for SWAT model. Refer to SWAT Manual and the article(Liu et al, 2017), following parameters are selected for SA.</p> ID Abbreviation Where Assign Type Range P1 CN2 MGT Relative [-0.4, 0.2] P2 GW_DELAY GW Value [30, 450] P3 ALPHA_BF GW Value [0.0, 1.0] P4 GWQMN GW Value [0.0, 500.0] P5 GW_REVAP GW Value [0.02, 0.20] P6 RCHRG_DP GW Value [0.0, 1.0] P7 SOL_AWC SOL Relative [0.5, 1.5] P8 SOL_K SOL Relative [0.5, 15.0] P9 SOL_ALB SOL Relative [0.01, 5.00] P10 CH_N2 RTE Value [-0.01, 0.30] P11 CH_K2 RTE Value [-0.01, 500.0] P12 ALPHA_BNK RTE Value [0.05, 1.00] P13 TLAPS SUB Value [-10.0, 10.0] P14 SLSUBSSN HRU Relative [0.05, 25.0] P15 HRU_SLP HRU Relative [0.50, 1.50] P16 OV_N HRU Relative [0.10, 15.00] P17 CANMX HRU Value [0.0, 100.0] P18 ESCO HRU Value [0.01, 1.00] P19 EPCO HRU Value [0.01, 1.00] P20 SFTMP BSN Value [-5.0, 5.0] P21 SMTMP BSN Value [-5.0, 5.0] P22 SMFMX BSN Value [0.0, 20.0] P23 SMFMN BSN Value [0.0, 20.0] P24 TIMP BSN Value [0.01, 1.00] <p>As the tutorial introduce, we first prepare the parameter file:</p> <p>File name: <code>paras_sa.par</code></p> <pre><code>Name Mode Type Min_Max Scope\nCN2 r f -0.4_0.2 all\nGW_DELAY v f 30_450 all\nALPHA_BF v f 0.0_1.0 all\nGWQMN v f 0.0_500.0 all\nGW_REVAP v f 0.02_0.20 all\nRCHRG_DP v f 0.0_1.0 all\nSOL_AWC r f 0.5_1.5 all\nSOL_K r f 0.5_15.0 all\nSOL_ALB r f 0.01_5.00 all\nCH_N2 v f -0.01_0.30 all\nCH_K2 v f  -0.01_500.0 all\nALPHA_BNK v f 0.05_1.00 all\nTLAPS v f -10.0_10.0 all\nSLSUBSSN r f 0.05_25.0 all\nHRU_SLP r f 0.50_1.50 all\nOV_N r f 0.10_15.00 all\nCANMX v f 0.0_100.0 all\nESCO v f 0.01_1.00 all\nEPCO v f 0.01_1.00 all\nSFTMP v f -5.0_5.0 all\nSMTMP v f -5.0_5.0 all\nSMFMX v f 0.0_20.0 all\nSMFMN v f 0.0_20.0 all\nTIMP v f 0.01_1.00 all\n</code></pre> <p>Then, the evaluation file should be created:</p> <p>File name: <code>obj_sa.evl</code></p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_23 : ID of RCH, or SUB, or HRU\nCOL_2 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_1 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n\n1   2012 1 1    38.6\n2   2012 1 2    16.2\n3   2012 1 3    24.5\n4   2012 1 4    26.9\n5   2012 1 5    56.2\n6   2012 1 6    82.1\n7   2012 1 7    32.8\n8   2012 1 8    20.5\n9   2012 1 9    32.3\n10  2012 1 10   28.9\n11  2012 1 11   36.5\n...\n...\n...\n1821    2016 12 25  94.8\n1822    2016 12 26  106\n1823    2016 12 27  135\n1824    2016 12 28  87.4\n1825    2016 12 29  81.5\n1826    2016 12 30  94.9\n1827    2016 12 31  89.9\n</code></pre> <p>\ud83d\udca1 Noted: Click this link to download related files(<code>para_sa.par</code> and <code>obj_sa.evl</code>)</p> <p>Based on this evaluation file, SWAT-UQ would extract the data of Reach 23 from <code>output.rch</code> during 2012.1.1 to 2016.12.31. In addition, the NSE function is used to evaluate the performance of model outputs.</p> <p>Finally, we can conduct the sensitivity analysis within python script-based environment:</p> <pre><code>from swat_uq import SWAT_UQ\n\nprojectPath = \"E://swatProjectPath\" # Use your SWAT project path\nworkPath = \"E://workPath\" # Use your work path\nexeName = \"swat2012.exe\" # The exe name you want execute\n\n#Blew two files should be created in the workPath\nparaFileName = \"paras_sa.par\" # the parameter file you prepared\nevalFileName = \"obj_sa.evl\" # the evaluation file you prepared\n\nproblem = SWAT_UQ(\n   projectPath = projectPath, # set projectPath\n   workPath = workPath, # set workPath\n   swatExeName = exeName # set swatExeName\n   paraFileName = paraFileName, # set paraFileName\n   evalFileName = evalFileName, # set evalFileName\n   verboseFlag = True, # enable verboseFlag to check if setup is configured properly.\n   numParallel = 10 # set the parallel numbers of SWAT\n)\n\n# The SWAT-related Problem is completed. \n\n# Perform sensitivity analysis\nfrom UQPyL.sensibility import FAST\n\nfast = FAST()\n\n# Generate sample set\nX = fast.sample(problem = problem, N = 512)\n# Therefore, the shape of X would be (12288, 24). It would be time-consuming to evaluate.\n\n# Recommend: a. use Linux Serve Computer; b. use surrogate-based methods.\n\nY = problem.objFunc(X)\n\nres = fast.analyze(X, Y)\n\nprint(res)\n</code></pre> <p>The analysis results of FAST methods are shown below:</p> <p>We select the top 10 parameters to be calibrated, i.e., CN2, ALPHA_BNK, SOL_K, SLSUBBSN, ESCO, HRU_SLP, OV_N, TLAPS, SOL_ALB, CH_K2.</p>"},{"location":"zh/example_runoff_calibration/#optimization","title":"Optimization","text":"<p>Based on the above sensitivity analysis, we need to recreate parameter file:</p> <p>File name: <code>para_op.par</code></p> <pre><code>Name Mode Type Min_Max Scope\nCN2 r f -0.4_0.2 all\nSOL_K r f 0.5_15.0 all\nSOL_ALB r f 0.01_5.00 all\nCH_K2 v f  -0.01_500.0 all\nALPHA_BNK v f 0.05_1.00 all\nTLAPS v f -10.0_10.0 all\nSLSUBSSN r f 0.05_25.0 all\nHRU_SLP r f 0.50_1.50 all\nOV_N r f 0.10_15.00 all\nESCO v f 0.01_1.00 all\n</code></pre> <p>The evaluation file is the same as the SA. But it is a good habit to rename it to <code>obj_op.evl</code></p> <p>\ud83d\udca1 Noted: Click this link to download related files(<code>para_op.par</code>, <code>obj_op.evl</code> and <code>val_op.evl</code> for validation).</p> <p>Finally, we can run the optimization within python script-based environment:</p> <pre><code>from swat_uq import SWAT_UQ\n\nprojectPath = \"E://swatProjectPath\" # Use your SWAT project path\nworkPath = \"E://workPath\" # Use your work path\nexeName = \"swat2012.exe\" # The exe name you want execute\n\n#Blew two files should be created in the workPath\nparaFileName = \"paras_sa.par\" # the parameter file you prepared\nevalFileName = \"obj_sa.evl\" # the evaluation file you prepared\n\nproblem = SWAT_UQ(\n   projectPath = projectPath, # set projectPath\n   workPath = workPath, # set workPath\n   swatExeName = exeName # set swatExeName\n   paraFileName = paraFileName, # set paraFileName\n   evalFileName = evalFileName, # set evalFileName\n   verboseFlag = True, # enable verboseFlag to check if setup is configured properly.\n   numParallel = 10 # set the parallel numbers of SWAT\n)\n\n# The SWAT-related Problem is completed. \n\nfrom UQPyL.optimization import PSO\n\npso = PSO(nPop = 50, maxFEs = 30000, verboseFlag = True, saveFlag = True)\n\npso.run(problem = problem)\n</code></pre> <p>The optimization results show:</p> <p>We list the optimal decision with NSE-&gt;0.88:</p> CN2 SOL_K SOL_ALB CH_K2 ALPHA_BNK TLAPS SLSUBSSN HRU_SLP OV_N ESCO -0.236 14.278 0.325 46.604 1.000 -5.532 1.611 0.515 3.162 0.010"},{"location":"zh/example_runoff_calibration/#validation","title":"Validation","text":"<p>We have obtained the optimal parameter settings for the SWAT model. Now, we proceed to perform validation.</p> <p>The evaluation file must first be prepared. Here, we apply the observed data ranging from 2017.1.1 to 2017.12.31.</p> <p>File name: <code>val_op.evl</code></p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_23 : ID of RCH, or SUB, or HRU\nCOL_2 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_1 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n\n1 2017 1 1 74.4\n2 2017 1 2 99.4\n3 2017 1 3 77.4\n...\n...\n365 2017 12 31 19.1\n</code></pre> <p>Using a Python script-based environment, we conduct the validation as follows:</p> <pre><code># optima\nX = np.array([-0.236, 14.278, 0.325, 46.604, 1.000, -5.532, 1.611, 0.515, 3.162, 0.010])\n\n# Perform validation\n# `problem.validate_parameters` expects the optimized parameters and the validation file.\n# It returns a dictionary containing two keys: 'objs' (objective values) and 'cons' (constraint violations).\nres = problem.validate_parameters(X, valFile = \"val_op.evl\") \n\n# Print the objective function values from the validation results\nprint(res[\"objs\"])\n</code></pre>"},{"location":"zh/example_runoff_calibration/#postprocessing","title":"Postprocessing","text":"<p>Except for sensitivity analysis and optimization, SWAT-UQ support to extract data from output files.</p> <pre><code>The `series.evl` should be prepared:\nSER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1 : Weight of series combination\nRCH_23  : ID of subbasin to be included in the objective function\nCOL_2 : Column ID of variables in output.rch\nFUNC_10     : Type of objective function (e.g., 1: NSE, 2: RMSE. 3:PCC, 4:Pbias, 5:KGE)\n2012/1/1 to 2016/12/31 : Period for data extraction\n</code></pre> <p>We can extract the data:</p> <pre><code>X = np.array([-0.236, 14.278, 0.325, 46.604, 1.000, -5.532, 1.611, 0.515, 3.162, 0.010])\n\n# Extract the corresponding series data based on the parameter set X\nattr = problem.extract_series(X, seriesFile=\"series.evl\")\n\n# The returned object 'attr' is a Python dictionary.\n# Simulation and observation data are stored separately by function type ('objSeries' or conSeries)objective function ID (objID) and series ID (serID). \n\nsimData = attr['objSeries'][1][1]['sim'] # Simulation data\nobData = attr['objSeries'][1][1]['obs']  # Observation data\n</code></pre>"},{"location":"zh/example_runoff_calibration/#apply-optima-to-project","title":"Apply optima to project","text":"<p>Now, we need to apply these values to the project folder:</p> <pre><code># Optimal parameter values\nX = np.array([-0.236, 14.278, 0.325, 46.604, 1.000, -5.532, 1.611, 0.515, 3.162, 0.010])\n\n# Apply parameters\nproblem.apply_parameters(X, replace=False)  \n# Setting 'replace=False' will apply the values to the working directory (workOriginPath) without modifying the original project files.\n\n# Alternatively\nproblem.apply_parameters(X, replace=True)  \n# Setting 'replace=True' will overwrite the original project folder, which is not recommended.\n</code></pre> <p>So far, the calibration work is completed.</p>"},{"location":"zh/example_runoff_calibration/#exercise-for-users","title":"Exercise for users","text":"<p>We provide an exercise based on the Xinfengjiang sub-basin, which is part of the Dongjiang watershed.</p> <p>You can download the complete project files here: Click here to download project files</p> <p>Within the downloaded project files, the observed data is stored in the file named <code>observed.txt</code>.</p> <p>If you have any questions or need assistance, feel free to contact us.</p>"},{"location":"zh/swat_uq_dev/","title":"SWAT-UQ-DEV \u6a21\u5757","text":""},{"location":"zh/swat_uq_dev/#dev","title":"DEV \u7248\u672c\u6982\u8ff0","text":"<p>SWAT-UQ-DEV \u662f\u4e00\u4e2a\u4e13\u4e3a \u811a\u672c\u5316\u73af\u5883 \u8bbe\u8ba1\u7684 Python \u8f6f\u4ef6\u5305\u3002\u8be5\u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a <code>SWAT_UQ</code> \u7684 Python \u7c7b\uff0c\u7ee7\u627f\u81ea UQPyL \u7684 <code>Problem</code> \u7c7b\u3002\u901a\u8fc7\u5b9e\u4f8b\u5316 <code>SWAT_UQ</code> \u7c7b\uff0c\u7528\u6237\u5373\u53ef\u76f4\u63a5\u8c03\u7528 UQPyL \u63d0\u4f9b\u7684\u5168\u90e8\u65b9\u6cd5\u548c\u7b97\u6cd5\u3002</p> <p>\u6b64\u5916\uff0c<code>SWAT_UQ</code> \u8fd8\u5c01\u88c5\u4e86\u4e00\u7cfb\u5217\u5185\u7f6e\u51fd\u6570\uff0c\u65e8\u5728\u7b80\u5316\u6784\u5efa\u4e0e\u6c42\u89e3\u5b9e\u9645\u95ee\u9898\uff08\u5982\u6a21\u578b\u6821\u51c6\u3001\u6700\u4f73\u7ba1\u7406\u5b9e\u8df5\u7b49\uff09\u7684\u6d41\u7a0b\uff0c\u63d0\u5347\u6548\u7387\u3002</p> <p>SWAT-UQ-DEV \u7279\u522b\u9002\u5408\u5e0c\u671b\u81ea\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7a0b\u3001\u96c6\u6210 UQPyL \u6216\u5176\u4ed6 Python \u5de5\u5177\u7684\u7528\u6237\u3002</p>"},{"location":"zh/swat_uq_dev/#_1","title":"\u4e3b\u8981\u7279\u6027","text":"<ol> <li> <p>\u5e76\u884c\u6267\u884c\uff1a \u65e0\u8bba\u662f\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u7684\u6570\u636e\u8bfb\u5199\uff0c\u8fd8\u662f SWAT \u6a21\u578b\u4eff\u771f\uff0c\u5747\u652f\u6301\u5e76\u884c\u5904\u7406\u3002    \ud83c\udf89 \u5728\u4e00\u53f0 40 \u6838\u670d\u52a1\u5668\u4e0a\u7684\u57fa\u51c6\u6d4b\u8bd5\u8868\u660e\uff0c\u8be5\u4ee3\u7801\u7248\u672c\u53ef\u7a33\u5b9a\u540c\u65f6\u8fd0\u884c 80 \u4e2a SWAT \u5b9e\u4f8b\u3002</p> </li> <li> <p>\u6587\u4ef6\u63a7\u5236\u7b80\u5316\uff1a \u5728\u8fdb\u884c\u5982\u6d41\u91cf\u6216\u6c34\u8d28\u7b49\u6a21\u578b\u6821\u51c6\u4efb\u52a1\u65f6\uff0c\u7528\u6237\u53ea\u9700\u51c6\u5907\u82e5\u5e72 <code>.txt</code> \u6587\u4ef6\uff0c\u5373\u53ef\u5b8c\u6210\u5168\u90e8\u8bbe\u7f6e\u3002</p> </li> <li> <p>\u6d41\u7a0b\u96c6\u6210\u6027\u5f3a\uff1a \u501f\u52a9 UQPyL \u7684\u652f\u6301\uff0c\u7528\u6237\u53ef\u8f7b\u677e\u6267\u884c\u5b8c\u6574\u7684\u5efa\u6a21\u6d41\u7a0b\uff0c\u5305\u62ec\uff1a</p> </li> <li>\u654f\u611f\u6027\u5206\u6790\uff08Sensitivity Analysis\uff09</li> <li>\u53c2\u6570\u4f18\u5316\uff08Optimization\uff09</li> <li>\u6700\u4f18\u53c2\u6570\u53cd\u4ee3\uff08Back-substitution\uff09</li> </ol>"},{"location":"zh/swat_uq_dev/#_2","title":"\u5b89\u88c5\u65b9\u5f0f","text":"<p>\u652f\u6301\u7684 Python \u7248\u672c\uff1a3.6 \u81f3 3.12 \u652f\u6301\u7cfb\u7edf\uff1aWindows\u3001Linux</p> <p>\u63a8\u8350\u5b89\u88c5\u65b9\u5f0f\uff08\u4f7f\u7528 PyPi \u6216 Conda\uff09\uff1a</p> <pre><code>pip install -U swatuq\n</code></pre> <pre><code>conda install swatuq --upgrade\n</code></pre>"},{"location":"zh/swat_uq_dev/#_3","title":"\u5feb\u901f\u5165\u95e8","text":"<p>\u672c\u8282\u5c06\u63d0\u4f9b\u9010\u6b65\u6307\u5357\uff0c\u5e2e\u52a9\u4f60\u901a\u8fc7 SWAT-UQ-DEV \u89e3\u51b3\u57fa\u4e8e SWAT \u7684\u5efa\u6a21\u95ee\u9898\u3002</p>"},{"location":"zh/swat_uq_dev/#_4","title":"\u7b2c\u4e00\u6b65\uff1a\u51c6\u5907\u6587\u4ef6\u4e0e\u76ee\u5f55\u7ed3\u6784","text":"<ol> <li>\u83b7\u53d6\u4e00\u4e2a SWAT \u9879\u76ee\u6587\u4ef6\u5939\uff08\u4ee5\u4e0b\u7b80\u79f0 SWAT Project Folder\uff09\u3002</li> <li>\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684 \u5de5\u4f5c\u6587\u4ef6\u5939\uff08Work Folder\uff09\uff0c\u7528\u4e8e\u5b58\u653e\u63a7\u5236\u6587\u4ef6\u548c\u5e76\u884c\u8fd0\u884c\u65f6\u751f\u6210\u7684\u4e34\u65f6\u6587\u4ef6\u3002</li> <li>\u5728 Work Folder \u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>paras.par</code> \u7684\u53c2\u6570\u6587\u4ef6\uff0c\u5185\u5bb9\u9700\u4e3a UTF-8 \u7f16\u7801\u3002</li> </ol> <p>\u6587\u4ef6\u683c\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>Name Type Mode Min_Max Scope\nCN2 r f -0.4_0.2 all\nGW_DELAY v f 30.0_450.0 all\n...\n</code></pre> <ul> <li>\u53c2\u6570\u540d\u79f0\u9700\u4e0e SWAT \u9879\u76ee\u4e2d\u7684\u540d\u79f0\u4e25\u683c\u4e00\u81f4\u3002</li> <li>\u652f\u6301\u7684\u8d4b\u503c\u65b9\u5f0f\u5305\u62ec\uff1a<ul> <li><code>r</code>\uff1a\u76f8\u5bf9\u8d4b\u503c\uff08\u65b0\u503c = \u539f\u503c \u00d7 (1+val)\uff09</li> <li><code>v</code>\uff1a\u7edd\u5bf9\u8d4b\u503c</li> <li><code>a</code>\uff1a\u52a0\u6cd5\u8d4b\u503c\uff08\u65b0\u503c = \u539f\u503c + val\uff09</li> </ul> </li> <li>\u53c2\u6570\u7c7b\u578b\u53ef\u4e3a\u6574\u6570 (<code>i</code>)\u3001\u6d6e\u70b9\u6570 (<code>f</code>)\u3001\u79bb\u6563 (<code>d</code>)\u3002</li> <li> <p>\u4f5c\u7528\u8303\u56f4\uff08Scope\uff09\u652f\u6301\u5168\u5c40\uff08<code>all</code>\uff09\uff0c\u4e5f\u652f\u6301\u7cbe\u786e\u6307\u5b9a\u5b50\u6d41\u57df\u548c HRU ID\u3002</p> </li> <li> <p>\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>eval.obj</code> \u7684 UTF-8 \u7f16\u7801\u6587\u4ef6\uff0c\u7528\u4e8e\u5b9a\u4e49\u76ee\u6807\u51fd\u6570\u6216\u7ea6\u675f\u51fd\u6570\u3002    \u6587\u4ef6\u5305\u62ec\uff1a</p> </li> <li>\u5934\u90e8\u5b9a\u4e49\u533a\uff08Head Definition\uff09\uff1a \u7528\u4e8e\u58f0\u660e\u6570\u636e\u7cfb\u5217 ID\u3001\u76ee\u6807\u51fd\u6570 ID\u3001\u6743\u91cd\u3001\u8f93\u51fa\u53d8\u91cf\u5217\u53f7\u3001\u8bc4\u4ef7\u6307\u6807\u7c7b\u578b\u7b49\uff1b</li> <li>\u6570\u636e\u533a\uff08Data Section\uff09\uff1a \u4e3a\u5bf9\u5e94\u89c2\u6d4b\u6570\u636e\uff0c\u652f\u6301\u6708\u3001\u65e5\u65f6\u95f4\u5c3a\u5ea6\uff1b</li> </ul> <p>\u652f\u6301\u7684\u8bc4\u4ef7\u6307\u6807\u5305\u62ec\uff1aNSE\u3001RMSE\u3001PCC\u3001Pbias\u3001KGE\u3001\u5747\u503c\u3001\u603b\u548c\u3001\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3002</p>"},{"location":"zh/swat_uq_dev/#_5","title":"\u7f16\u7a0b\u793a\u4f8b","text":"<p>\u4ee5\u4e0b Python \u811a\u672c\u5c55\u793a\u4e86\u5982\u4f55\u5b9a\u4e49\u5e76\u8fd0\u884c\u4e00\u4e2a SWAT-UQ \u95ee\u9898\uff1a</p> <pre><code># First import SWAT_UQ class\nfrom swatuq import SWAT_UQ\n\n# Second define requirement variables:\n\nprojectPath = \"E://swatProjectPath\"  # your SWAT Project Path\nworkPath = \"E://workPath\" # your Work Path\nexeName = \"swat2012.exe\" # the name of swat.exe you want to run\nparaFileName = \"paras.par\" # the parameter file you prepared\nevalFileName = \"eval.obj\" # the evaluation file you prepared\n\nproblem = SWAT_UQ(\n   projectPath = projectPath, # set projectPath\n   workPath = workPath, # set workPath\n   swatExeName = exeName # set swatExeName\n   paraFileName = paraFileName, # set paraFileName\n   evalFileName = evalFileName, # set evalFileName\n   verboseFlag = True, # enable verboseFlag to check if setup is configured properly.\n   numParallel = 2 # set the number of parallels\n)\n\n# The SWAT-related Problem is completed. You can enjoy all methods and algorithms of UQPyL.\n\n#For example:\nfrom UQPyL.optimization.single_objective import GA\n\nga = GA()\nga.run(problem = problem)\n</code></pre> <p>\ud83d\udca1 \u63d0\u793a\uff1a \u66f4\u591a\u5173\u4e8e UQPyL \u7684\u7528\u6cd5\u8be6\u89c1 UQPyL \u4f7f\u7528\u6587\u6863</p>"},{"location":"zh/swat_uq_dev/#_6","title":"\u5e94\u7528\u6700\u4f18\u53c2\u6570","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u5c06\u6700\u4f18\u53c2\u6570\u5e94\u7528\u5230\u539f\u59cb\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\uff0c\u6216\u53ea\u4f5c\u7528\u4e8e\u5de5\u4f5c\u76ee\u5f55\uff1a</p> <pre><code># X should be a list or a NumPy 1D or 2D array\nproblem.apply_parameter(X, replace=False)  # \u5e94\u7528\u4e8e\u5de5\u4f5c\u8def\u5f84\uff0c\u4e0d\u4fee\u6539\u539f\u59cb\u9879\u76ee\nproblem.apply_parameter(X, replace=True)   # \u76f4\u63a5\u5199\u5165\u539f\u59cb SWAT \u9879\u76ee\n</code></pre>"},{"location":"zh/swat_uq_gui/","title":"SWAT-UQ-GUI","text":""},{"location":"zh/swat_uq_gui/#overview-of-gui-version","title":"Overview of GUI Version","text":"<p>\ud83d\udca1 Noted: SWAT-UQ-GUI is still in demo stage (Now, we advise to use SWAT-UQ-DEV). Feel free to give it a try \u2014 the full version is on the way!</p> <p>SWAT-UQ-GUI is designed for parameter uncertainty quantification (UQ) of the SWAT model. Its core functionalities are built upon UQPyL, our public released Python package for UQ. A key advantage of this platform is that users do not need to worry about coding. It seamlessly automates complete workflow from sensitivity analysis to parameter optimization, result checking, finally data visualization.</p> <p> </p> <p>Figure 1. Get Start Card</p> <p>SWAT-UQ-GUI consists of three modules corresponding to preparation, execution, and post-processing.  As Figure 1 shows, preparation involves Parameter Setting, Objective Define; Execution includes Sensibility Analysis, Problem Optimization, Result Validation &amp; Apply; Post-processing provide interface for histogram (Visualization A) and point-line figure (Visualization B).</p>"},{"location":"zh/swat_uq_gui/#key-features","title":"Key Features","text":"<p>End-to-end visualization: SWAT-UQ-GUI supports fully visualized operations across the entire workflow \u2014 from problem definition and sensitivity analysis to optimization and final result validation.</p> <p>Modular &amp; Extensible Architecture: SWAT-UQ-GUI adopts a modular structure that's easy to extend \u2014 new methods and tools can be integrated without disrupting existing workflows.</p>"},{"location":"zh/swat_uq_gui/#quick-start","title":"Quick Start","text":"<p>Here, we provide a Quick Start. In future plans, we will provide detailed documentation and videos.</p> <p>Please choose the latest release version of SWAT-UQ.</p> <p>Demo Version has been released: SWAT-UQ</p> <p>Step1: On the Get Started interface, click the New Project card to create a project or the Open Project card to open an existing one. You can also select the Example card for reference cases or the Help card for assistance.</p> <p> </p> <p>Figure 2. New Project Card and Open Project Card</p> <p>For the New Project Card (left picture of Figure 2), users need to provide the following information: the UQ Project name, the UQ Project path, and the SWAT Project path. After these inputs are provided, the program will verify the validity of the SWAT project files. If the verification is successful, other modules will be activated. Once the UQ Project is created, a project file named *.prj (where * represents the UQ Project name set by the user) will be saved in the specified UQ Project path.  </p> <p>For the Open Project Card (right picture of Figure 2), users should select the folder that contains *.prj files. SWAT-UQ will then check the validity of the project file before proceeding.  </p> <p>Step2: On the Parameter Setting and Objective Definition, the parameter file (.par) and the objective file (.obj) should be created. These files are crucial as they specify which parameters will be modified and what objectives will be evaluated by the program.</p> <p> </p> <p>Figure 3. Parameter Setting Card and Figure 4. Objective Define Card</p> <p>To be specific, as shown in Figure 3, the Parameter Setting Card enables users to define the parameters they wish to tune. There are two ways to add parameters to the information table: either by importing them from an existing file or by clicking the Add button to open the Parameter Selection widget. In this table, all selectable parameters are organized by the suffix of the SWAT project files. Additionally, the search bar provides a convenient way to locate specific parameters quickly.</p> <p></p> <p>Figure 4. Parameter Setting Table </p> <p>After adding parameters, users can set the tuning mode, lower and upper bounds, and specify tuning files (default: all) for each parameter (Figure 3 shows). Finally, these settings should be saved to the UQ project folder by clicking \"Saving Current Parameter\" button.</p> <p>There are also two ways to define the objective function: by importing from existing files or by user definition. For user definition, you should click \"Add\" button. </p> <p></p> <p>Figure 5. Objective Define Table </p> <p>As shown in Figure 5, users need to accurately fill in the objective ID, series ID, objective type, variable type, weight, and other relevant information. It is important to note that both the series ID and objective ID can be repeated, allowing for combinations of multiple series or weighted combinations of series. For more details, please refer to the comprehensive documentation.</p> <p>After defining objectives, you can save them to the objective file. It is also allowed to define multiple objective functions within a single file.</p> <p>Step3: Perform sensitivity analysis or parameter optimization as needed. </p> <p>Using Sensitivity Analysis as an example, as shown in the left image of Figure 6, users should first select the parameter file and objective file. Next, they choose the desired sensitivity analysis method and sampling technique. Users can then configure additional settings as required, fine-tuning the hyper-parameters to best meet project needs before proceeding. SWAT-UQ thoughtfully displays the number of parameters and the total sample size to assist users in making informed decisions.</p> <p>Once all initial settings are all ready, click the \"Next\" button to proceed to the simulation and analysis process. The right image of Figure 6 displays the settings of simulation, including the selection of SWAT executable file, parallel numbers and problem name. Finally, click the \"Initialize,\" \"Sampling,\" and \"Simulation\" buttons in sequence, and wait for simulation completing. SWAT-UQ can display the simulation progress in real-time, and users can also pause it to reconfigure settings. It would save the analysis result into UQ project folder (./Result/data/). The result file would be used to check or draw visualization picture.</p> <p> </p> <p> Figure 6. Sensibility Analysis Interface </p> <p>For parameter optimization, users should still select parameter file and objective file at first. When users check more than two objectives, the multi-objective optimization would be activated; conversely, if only one objective is selected, single-objective optimization is used. After fine-tuning hyper-parameters, the optimization process would be started, like sensibility analysis. SWAT-UQ can display the optimization progress in real-time, along with the optimal parameter values for each iteration.</p> <p> </p> <p> Figure 7. Parameter Optimization Interface </p> <p>Here, we list the available sensibility analysis method and optimization method.</p> <p>Sensibility Analysis: - Sobol' - Delta Test (DT) #TODO - Extended Fourier Amplitude Sensitivity Test (eFAST) - Random Balance Designs - Fourier Amplitude Sensitivity Test (RBD-FAST) - Multivariate Adaptive Regression Splines-Sensitivity Analysis (MARS-SA) #TODO - Morris - Regional Sensitivity Analysis (RSA)</p> <p>Optimization Algorithm: ( indicates solving computational expensive optimization problem) - Single Objective Optimization: SCE-UA, ML-SCE-UA, GA, CSA, PSO, DE, ABC, ASMO (#TODO), EGO (#TODO) - Multi-Objective Optimization: MOEA/D, NSGA-II, RVEA, MOASMO (#TODO)</p> <p>Step 4: Result Validation and Apply. On Result Validation &amp; Apply interface, SWAT-UQ allows users to simulate a specific set of parameters individually and extract the desired time series data, or apply the optimal parameters directly to the SWAT project files. This parameter set can be user-defined or sourced from completed optimization result files.</p> <p></p> <p> Figure 8. Result Validation Interface </p> <p>Step 5: Result Visualization. The current SWAT-UQ provides two types of plot pictures: a bar chart for sensitivity analysis (Visualization A Interface) and an iteration convergence plot for parameter optimization (Visualization B Interface). Of course, additional types of plots will be continuously added in future versions. Figures 9 and 10 shows the visualization pictures from two interfaces.</p> <p></p> <p> Figure 9. Sensibility Analysis Visualization </p> <p></p> <p> Figure 10. Optimization Visualization </p> <p>Specifically, On the Visualization A and Visualization B, user can select the result file. SWAT-UQ would generates initial visualizations. Users can click the \"Config\" button to open the settings panel and tune various parameters of the plot based on the preset values, as Figure 11 indicates.</p> <p> </p> <p> Figure 11. Visualization Interface </p> <p>This concludes the Quick Start section for SWAT-UQ. For more advanced operations, please refer to the documentation.</p>"},{"location":"zh/en/","title":"Welcome to SWAT-UQ documentation","text":"<p>SWAT-UQ is an extend project of UQPyL - a comprehensive platform for uncertainty analysis and parameter optimization. This project aims to provide full integration of UQPyL and Soil and Water Assessment Tool (SWAT), enabling users to easily perform sensitivity analysis, single-objective optimization, and multi-objective optimization and so on. </p> <p>There are two available versions of SWAT-UQ, tailored to meet different user needs:</p> <ul> <li> <p>SWAT-UQ-DEV (Develop Version) - Designed for advanced users who require high flexibility and customization in building and managing their modeling workflows.</p> </li> <li> <p>SWAT-UQ-GUI (GUI Version) - Offers an intuitive graphical interface for streamlined operation, ideal for users seeking minimal coding involvement.</p> </li> </ul> <p>With SWAT-UQ, users can seamlessly incorporate powerful uncertainty quantification and optimization capabilities into their SWAT-based hydrological modeling projects.</p>"},{"location":"zh/en/#project-overview","title":"\ud83d\udd17 Project Overview","text":"<ul> <li>Website: Official Site (TODO: Needs update)</li> <li>Source Code: GitHub Repository</li> <li>Documentation: ReadTheDocs</li> <li>Citation Infos: SWAT-UQ (Future Plan)</li> </ul>"},{"location":"zh/en/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ul> <li>Tutorial<ul> <li>SWAT-UQ-DEV</li> <li>SWAT-UQ-GUI</li> </ul> </li> <li>Example Collection<ul> <li>Example 1: Runoff Calibration</li> <li>Example 2: Best Management Practices</li> </ul> </li> </ul>"},{"location":"zh/en/#uq-project-series","title":"\u2b50 UQ Project Series","text":"<ul> <li>UQPyL, a Python package for Uncertainty Quantification and Parameter Optimization.</li> </ul> Overview of UQPyL <ul> <li>SWAT-UQ, providing script-based (Develop) and GUI versions to integrate UQPyL and the Soil and Water Assessment Tool (SWAT) model. </li> </ul> SWAT-UQ GUI Version"},{"location":"zh/en/best_management_practices/","title":"Example 2: Best Management Practices for the Four Lake watershed","text":""},{"location":"zh/en/best_management_practices/#background","title":"Background","text":"<p>When watersheds are impacted by nonpoint source pollution, the integration of the SWAT model with best management practices (BMPs) has proven to be a reliable and effective tool. This example refers to the article(Long et al, 2025). </p> <p>Information about Four Lake watershed</p> <p>The Four Lake watershed locates in the middle reaches of the Yangtze River and the hinterland of the Jianghan Plain. For studying the transportation of water quality in this watershed, we build the SWAT model first. The data set used includes:</p> <ul> <li>DEM - The ASTER GDEM with a spatial resolution of 30 meters</li> <li>Land Use - The CNLUCC (China Land-Use/Cover Change) dataset </li> <li>Soil Data - The Second National Land Survey of Nanjing Soil Institute 1:1 million Soil Counts</li> <li>Meteorological Data - Regional Surface Meteorological Factor-Driven Dataset for China</li> <li>Runoff Observation - Runoff of Hydrographic Yearbook. (2008.1.1 to 2021.12.31)</li> <li>Water Quality Observation - China National Environmental Monitoring Center (2020.11 to 2021.12)</li> </ul> <p>The calibration of runoff and water quality is omitted here, with a primary focus on the process of Best Management Practices (BMPs). In China, Total Nitrogen (TN) and Total Phosphorus (TP) concentrations are critical indicators for assessing lake water quality. The distributions of TN and TP in 2021.12.31 are show blew:</p> <p> </p> <p>The distributions of TN and TP in the Four Lake basin</p> <p>In the SWAT model applied in this study, the main lake is situated within sub-basin 32. Accordingly, particular attention should be directed toward sub-basin 51, which serves as the primary inflow region. Furthermore, management practices should be prioritized in the identified critical source areas, namely sub-basins 1, 13, 14, 20, and 31.</p>"},{"location":"zh/en/best_management_practices/#optimization","title":"Optimization","text":"<p>In SWAT, there are many built-in BMPs, e.g., the terracing operation (BMP1), the tile drainage (BMP2) ... the filter strip (BMP4) ... the grassed waterways (BMP7). </p> <p>For reduce TN and TP, the BMP4 and BMP7 are commonly utilized. Considering the cost, this example only focuses on the critical sub-basins like 1, 13, 14, 20, and 31.</p> <p>The .ops files in SWAT project control and set BMPs to simulated the watershed. The parameters involving the filter strip are:</p> <ul> <li>FILTER_I: Indicator for filter strip simulation (1 for active, 0 for inactive).</li> <li>FILTER_RATIO: The ratio of field area to filter strip area (ha/ha). Range: 0\u2013300.</li> <li>FILTER_CON: Fraction of the HRU area where 10% is densely vegetated and evenly distributed along the filter strip. This 10% area can intercept 25\u201375% of surface runoff.</li> <li>FILTER_CH: Fraction of the 10% dense area occupied by fully channelized flow (dimensionless). Fully channelized flow is not filtered by the strip.</li> </ul> <p>The parameters about grassed waterways are:</p> <ul> <li>GWATI: Indicator for vegetative channel simulation (1 for active, 0 for inactive).</li> <li>GWATN: Manning's roughness coefficient for overland flow within the vegetative channel.</li> <li>GWATSPCON: Linear parameter for calculating sediment transport capacity in the vegetative channel.</li> <li>GWATD: Depth of the vegetative channel (m). If not specified, it is set to 3/64 of GWATW.</li> <li>GWATW: Average width of the vegetative channel (m).</li> <li>GWATL: Length of the vegetative channel (km).</li> <li>GWATS: Average slope of the vegetative channel (m/m).</li> </ul> <p>To simplify the setting of BMPs, this example only optimize five parameters for a sub-basin, i.e., FILTER_I, FILTER_RATIO, GWATI, GWATW, and GWATL, resulting in a total of 25 variables. In addition, the optimization objectives including the reduction of TN and TP loads, as well as the costs associated with these BMPs. Therefore, this example is a multi-objective optimization problem involving a mixture of parameters.</p> <p>The key information (variable types and ranges) of optimization parameters can be concluded as follows:</p> Name Type Range Unit FILTER_I int 0-1 none FILTER_RATIO float 1-300 none GWATI int 0-1 none GWATW discrete 1, 5, 10, 15, 20, 25, 30 m GWATL float 10-1000 km <p>The first step is to prepare the parameter files. In contrast to Example 1, the BMP parameters differ among sub-basins. Consequently, each sub-basin requires an independent definition of all relevant parameters. In addition, the discrete parameter GWATW represents all possible values in the 'Min_Max' field by linking them with an underscore ('_'):</p> <pre><code>GWATW v d 1_5_10_15_20_25_30 1\n</code></pre> <p>The complete parameter file is:</p> <p>File name : <code>para_bmp.par</code></p> <pre><code>Name Mode Type Min_Max Scope\nFILTER_I v i 0_1 1\nFILTER_RATIO v f 1_300 1\nGWATI v i 0_1 1\nGWATW v d 1_5_10_15_20_25_30 1\nGWATL v f 10_1000 1\nFILTER_I v i 0_1 13\nFILTER_RATIO v f 1_300 13\nGWATI v i 0_1 13\nGWATW v d 1_5_10_15_20_25_30 13\nGWATL v f 10_1000 13\nFILTER_I v i 0_1 14\nFILTER_RATIO v f 1_300 14\nGWATI v i 0_1 14\nGWATW v d 1_5_10_15_20_25_30 14\nGWATL v f 10_1000 14\nFILTER_I v i 0_1 20\nFILTER_RATIO v f 1_300 20\nGWATI v i 0_1 20\nGWATW v d 1_5_10_15_20_25_30 20\nGWATL v f 10_1000 20\nFILTER_I v i 0_1 31\nFILTER_RATIO v f 1_300 31\nGWATI v i 0_1 31\nGWATW v d 1_5_10_15_20_25_30 31\nGWATL v f 10_1000 31\n</code></pre> <p>\ud83d\udca1 Noted: This file supports parameters with the same name, as they are distinguished by their indices.</p> <p>Before editing the <code>evl</code> file, three objectives should be introduced. The first objective is the reduction of TN:</p> <p>Obj_1 = \\left ( TN_{base} - TN_{now}\\right ) / TN_{base}</p> <p>where TN_{base} and TN_{now} denote the total amount of TN flowing out of the 51 sub-basin before and after the application of BMPs, respectively.</p> <p>The second objective is the reduction of TP:</p> <p>Obj_2 = \\left ( TP_{base} - TP_{now}\\right ) / TP_{base}</p> <p>where TP_{base} and TP_{now} denote the total amount of TP flowing out of the 51 sub-basin before and after the implementation of BMPs, respectively.</p> <p>The third objective is the cost of BMPs. The unit cost of filter strip is 420 Yuan/ha, while the grassed waterways is 200 Yuan/ha. Therefore, for a sub-basin, the cost is:</p> <p>cost_{filter}^i = Area_{AGRI}^i*FILTER_RATIO*FILTER_I*420</p> <p>cost_{gwat}^i = GWATW* GWATL/10*GWATI*200</p> <p>Obj_3 = \\sum{cost_{filter}^i + cost_{gwat}^i}, i\\in \\left \\{ 1,13,14,20,31 \\right \\}</p> <p>where Area_{AGRI} represents the area of agricultural land use.</p> <p>In this example, the computation of the objectives cannot be performed solely using the <code>*.eval</code> file. However, the necessary data can be obtained from the file, after which the <code>objFunc</code> or <code>conFunc</code> can be defined manually by the user.</p> <p>For the first two objectives, the total amounts of TN and TP flowing out of the sub-basin 51 during 2021 are required.</p> <p>Therefore, the <code>eval</code> file can be:</p> <p>File name : <code>obj_bmp.evl</code></p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_51 : ID of RCH, or SUB, or HRU\nCOL_42 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_7 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n2021.1.1 to 2021.12.31 : \n\nSER_2 : ID of series data\nOBJ_2 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_51 : ID of RCH, or SUB, or HRU\nCOL_43 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_7 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n2021.1.1 to 2021.12.31 : Period for data extraction\n</code></pre> <p>Then, the <code>userObjFunc</code> should be implemented. The <code>userObjFunc</code> would accept a python dict named <code>attr</code> that contain several built-in keywords, e.g., <code>x</code>, <code>objs</code>, <code>cons</code>, <code>objSeries</code>, <code>conSeries</code>, <code>HRUInfos</code>. </p> <p>API: <pre><code>attr -&gt; a python dict\n\nkeywords:\n\n- x : The input decision, np.1darray\n- objs : The objective values of this input decision, a python dict, use `attr['objs'][objID]` defined by the *.evl file\n- cons : Similar to objs\n- objSeries : A python dict records the series defined by the *.evl file, use `attr['objSeries'][objID][serID]`\n- conSeries : Similar to objSeries\n- HRUInfos : A pandas table that records the information about HRU, columns are [\"HRU_ID\", \"SUB_ID\", \"HRU_Local_ID\", \"Slope_Low\", \"Slope_High\", \"Luse\", \"Area\"]\n</code></pre></p> <p>Now, the <code>userObjFunc</code> can be implemented by:</p> <pre><code># Define base total nitrogen (TN) and total phosphorus (TP) loads for normalization\n\nTN_Base = 3.314e7  # Baseline total nitrogen load (unit depends on context)\nTP_Base = 3.717e6  # Baseline total phosphorus load\n\n# Define the list of Basin IDs where BMPs (Best Management Practices) are applied\nBasins = [1, 13, 14, 20, 31]\n\ndef userObjFunc(attr):\n    \"\"\"\n    User-defined objective function.\n\n    Parameters:\n    - attr: dict\n        Contains input decision variables, objective values, constraint values,\n        time series for objectives and constraints, and HRU (Hydrological Response Unit) information.\n\n    Returns:\n    - objs: np.ndarray\n        Array containing computed objective values [obj_1, obj_2, obj_3].\n    \"\"\"\n\n    objs = np.zeros(3)  # Initialize three objective values\n\n    # Extract decision variables (not used directly here, kept for potential future needs)\n    x = attr[\"x\"]\n\n    # Compute the first objective:\n    # Relative reduction in TN load compared to baseline\n    objs[0] = (TN_Base - attr['objs'][1]) / TN_Base\n\n    # Compute the second objective:\n    # Relative reduction in TP load compared to baseline\n    objs[1] = (TP_Base - attr['objs'][2]) / TP_Base\n\n    # Compute the third objective: Total cost of BMP implementations\n    HRUInfosTable = attr[\"HRUInfos\"]  # Extract HRU information table\n\n    cost = 0  # Initialize total cost\n\n    for i, ID in enumerate(Basins):\n        # Calculate the total area of the sub-basin\n        areas = np.sum(\n            HRUInfosTable.loc[\n                (HRUInfosTable.SUB_ID == ID),\n                \"Area\"\n            ].tolist()\n        )\n\n        # Extract BMP design parameters from decision variables\n        filter_I = x[5 * i]       # Filter switch\n        filter_ratio = x[5 * i + 1]  # Fraction of area treated by filter\n        graw_I = x[5 * i + 2]     # Graw BMP switch\n        graw_W = x[5 * i + 3]     # Graw BMP width\n        graw_L = x[5 * i + 4]     # Graw BMP length\n\n        # Calculate the cost of filter BMPs\n        cost_filter = areas * filter_ratio * filter_I * 420  # unit cost: 420 Yuan/ha\n\n        # Calculate the cost of Graw BMPs\n        cost_graw = graw_W * graw_L * graw_I /10 * 200  # unit cost = 200 Yuan/ha\n\n        # Accumulate total cost\n        cost += cost_filter + cost_graw\n\n    objs[2] = cost  # Assign total cost to the third objective\n\n    return objs\n</code></pre> <p>Unitl now, all preparatory work has been completed, and the optimization process can be conducted.</p> <pre><code>import numpy as np\nfrom swatuq import SWAT_UQ\nfrom UQPyL.optimization.multi_objective import NSGAII\n\nnInput = 25\nnOutput = 3\n\nprojectPath = \"E:\\\\BMPs\\\\TxtInOut\" # SWAT Project Path\nexeName = \"swat.exe\" # Name of swat execute program in SWAT Project Path\nworkPath = \"E:\\\\DJ_FSB\" # Work Path\nparaFileName = \"para_bmp.par\" # Name of parameter file in Work Path\nevalFileName = \"obj_bmp.evl\" # Name of evaluation file in Work Path \nspecialFileName = \"special_paras1.txt\" # Name of special parameter file in Work Path\n\nproblem = SWAT_UQ(projectPath = projectPath, swatExeName = exeName, \n                  specialFileName = specialFileName, workPath = workPath, \n                  paraFileName = paraFileName, evalFileName = evalFileName, \n                  verboseFlag = True, numParallel = 10,\n                  userObjFunc = userObjFunc, nOutput = 3, \n                  optType = [\"max\", \"max\", \"min\"])\n\nnsgaii = NSGAII(nPop = 100, maxFEs = 20000, saveFlag = True, verboseFlag = True, verboseFreq = 5)\n\nnsgaii.run(problem = problem)\n\n# The result would be save to `Result\\Data\\NSGAII_SWAT-UQ_D25_M3.hdf`\n</code></pre> <p>The visualization of BMP optimization shows below:</p>"},{"location":"zh/en/example_runoff_calibration/","title":"Example 1: Runoff Calibration for the Dongjiang watershed","text":""},{"location":"zh/en/example_runoff_calibration/#background","title":"Background","text":"<p>The Dongjiang watershed in Guangdong is a critical freshwater source, covering an area of over 35,000 square kilometers. It supplies water to several major cities, including Guangzhou, Shenzhen, and Hong Kong.</p> <p>In this study, we use the Fengshuba and XinFengJiang sub-basins of the Dongjiang watershed as examples for runoff calibration.</p> <p>We primarily present the calibration process for the Fengshuba sub-basin, which has a catchment area of 5,150 km\u00b2 and an average annual rainfall of 1,581 mm. But, for helping users familiar with SWAT-UQ, the calibration of the XinFengJiang sub-basin is provided as an additional exercise.</p>"},{"location":"zh/en/example_runoff_calibration/#swat-modelling","title":"SWAT Modelling","text":"<p>For building SWAT model of Fengshuba sub-basin, the data set used includes:</p> <ul> <li>DEM - The ASTER GDEM with a spatial resolution of 30 meters</li> <li>Land Use - The RESDC (Resource and Environmental Science Data Center) dataset</li> <li>Soil Data - The HWSD (Harmonized World Soil Database)</li> <li> <p>Meteorological Data - The CMADS (China Meteorological Assimilation Driving Dataset)</p> </li> <li> <p>Observation - Runoff of Hydrographic Yearbook. (2008.1.1 to 2017.12.31)</p> </li> </ul> <p>For calibration, the simulation periods are:</p> <ul> <li>Warm up Period - 2008.1.1 to 2011.12.31</li> <li>Calibration Period - 2012.1.1 to 2016.12.31</li> <li>Validation Period - 2017.1.1 to 2017.12.31</li> </ul> <p>\ud83d\udca1 Noted: Click this link to download project files.</p>"},{"location":"zh/en/example_runoff_calibration/#problem-define","title":"Problem Define","text":"<p>The definition of the problem refers to the process of transforming a practical problem into an abstract problem that can be described using mathematical formulas and code. </p> <p>In this example, the ultimate goal is to obtain the SWAT model whose output completely approximate to observed data. First, we need to identify the indicators to evaluate how well the SWAT model has been built. In hydrology, common indicators, e.g., NSE, R2, KGE, RMSE, PCC, and so on. Here, we use the NSE. </p> <p>Therefore, this practical problem can be abstracted into:</p> <p>Where x denotes the undetermined parameters of the SWAT model; NSE(\\cdot) denotes the NSE operation; sim denotes the simulation data obtained from running the SWAT model; ob denotes the observed data from Chinese year book; lb, ub denotes the lower and upper bound of each parameters.</p> <p>Next, based on this abstracted problem, we can describe it using code within the framework of SWAT-UQ.</p>"},{"location":"zh/en/example_runoff_calibration/#sensitivity-analysis","title":"Sensitivity Analysis","text":"<p>First, we would conduct sensitivity analysis (SA) for SWAT model. Refer to SWAT Manual and the article(Liu et al, 2017), following parameters are selected for SA.</p> ID Abbreviation Where Assign Type Range P1 CN2 MGT Relative [-0.4, 0.2] P2 GW_DELAY GW Value [30, 450] P3 ALPHA_BF GW Value [0.0, 1.0] P4 GWQMN GW Value [0.0, 500.0] P5 GW_REVAP GW Value [0.02, 0.20] P6 RCHRG_DP GW Value [0.0, 1.0] P7 SOL_AWC SOL Relative [0.5, 1.5] P8 SOL_K SOL Relative [0.5, 15.0] P9 SOL_ALB SOL Relative [0.01, 5.00] P10 CH_N2 RTE Value [-0.01, 0.30] P11 CH_K2 RTE Value [-0.01, 500.0] P12 ALPHA_BNK RTE Value [0.05, 1.00] P13 TLAPS SUB Value [-10.0, 10.0] P14 SLSUBSSN HRU Relative [0.05, 25.0] P15 HRU_SLP HRU Relative [0.50, 1.50] P16 OV_N HRU Relative [0.10, 15.00] P17 CANMX HRU Value [0.0, 100.0] P18 ESCO HRU Value [0.01, 1.00] P19 EPCO HRU Value [0.01, 1.00] P20 SFTMP BSN Value [-5.0, 5.0] P21 SMTMP BSN Value [-5.0, 5.0] P22 SMFMX BSN Value [0.0, 20.0] P23 SMFMN BSN Value [0.0, 20.0] P24 TIMP BSN Value [0.01, 1.00] <p>As the tutorial introduce, we first prepare the parameter file:</p> <p>File name: <code>paras_sa.par</code></p> <pre><code>Name Mode Type Min_Max Scope\nCN2 r f -0.4_0.2 all\nGW_DELAY v f 30_450 all\nALPHA_BF v f 0.0_1.0 all\nGWQMN v f 0.0_500.0 all\nGW_REVAP v f 0.02_0.20 all\nRCHRG_DP v f 0.0_1.0 all\nSOL_AWC r f 0.5_1.5 all\nSOL_K r f 0.5_15.0 all\nSOL_ALB r f 0.01_5.00 all\nCH_N2 v f -0.01_0.30 all\nCH_K2 v f  -0.01_500.0 all\nALPHA_BNK v f 0.05_1.00 all\nTLAPS v f -10.0_10.0 all\nSLSUBSSN r f 0.05_25.0 all\nHRU_SLP r f 0.50_1.50 all\nOV_N r f 0.10_15.00 all\nCANMX v f 0.0_100.0 all\nESCO v f 0.01_1.00 all\nEPCO v f 0.01_1.00 all\nSFTMP v f -5.0_5.0 all\nSMTMP v f -5.0_5.0 all\nSMFMX v f 0.0_20.0 all\nSMFMN v f 0.0_20.0 all\nTIMP v f 0.01_1.00 all\n</code></pre> <p>Then, the evaluation file should be created:</p> <p>File name: <code>obj_sa.evl</code></p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_23 : ID of RCH, or SUB, or HRU\nCOL_2 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_1 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n\n1   2012 1 1    38.6\n2   2012 1 2    16.2\n3   2012 1 3    24.5\n4   2012 1 4    26.9\n5   2012 1 5    56.2\n6   2012 1 6    82.1\n7   2012 1 7    32.8\n8   2012 1 8    20.5\n9   2012 1 9    32.3\n10  2012 1 10   28.9\n11  2012 1 11   36.5\n...\n...\n...\n1821    2016 12 25  94.8\n1822    2016 12 26  106\n1823    2016 12 27  135\n1824    2016 12 28  87.4\n1825    2016 12 29  81.5\n1826    2016 12 30  94.9\n1827    2016 12 31  89.9\n</code></pre> <p>\ud83d\udca1 Noted: Click this link to download related files(<code>para_sa.par</code> and <code>obj_sa.evl</code>)</p> <p>Based on this evaluation file, SWAT-UQ would extract the data of Reach 23 from <code>output.rch</code> during 2012.1.1 to 2016.12.31. In addition, the NSE function is used to evaluate the performance of model outputs.</p> <p>Finally, we can conduct the sensitivity analysis within python script-based environment:</p> <pre><code>from swat_uq import SWAT_UQ\n\nprojectPath = \"E://swatProjectPath\" # Use your SWAT project path\nworkPath = \"E://workPath\" # Use your work path\nexeName = \"swat2012.exe\" # The exe name you want execute\n\n#Blew two files should be created in the workPath\nparaFileName = \"paras_sa.par\" # the parameter file you prepared\nevalFileName = \"obj_sa.evl\" # the evaluation file you prepared\n\nproblem = SWAT_UQ(\n   projectPath = projectPath, # set projectPath\n   workPath = workPath, # set workPath\n   swatExeName = exeName # set swatExeName\n   paraFileName = paraFileName, # set paraFileName\n   evalFileName = evalFileName, # set evalFileName\n   verboseFlag = True, # enable verboseFlag to check if setup is configured properly.\n   numParallel = 10 # set the parallel numbers of SWAT\n)\n\n# The SWAT-related Problem is completed. \n\n# Perform sensitivity analysis\nfrom UQPyL.sensibility import FAST\n\nfast = FAST()\n\n# Generate sample set\nX = fast.sample(problem = problem, N = 512)\n# Therefore, the shape of X would be (12288, 24). It would be time-consuming to evaluate.\n\n# Recommend: a. use Linux Serve Computer; b. use surrogate-based methods.\n\nY = problem.objFunc(X)\n\nres = fast.analyze(X, Y)\n\nprint(res)\n</code></pre> <p>The analysis results of FAST methods are shown below:</p> <p>We select the top 10 parameters to be calibrated, i.e., CN2, ALPHA_BNK, SOL_K, SLSUBBSN, ESCO, HRU_SLP, OV_N, TLAPS, SOL_ALB, CH_K2.</p>"},{"location":"zh/en/example_runoff_calibration/#optimization","title":"Optimization","text":"<p>Based on the above sensitivity analysis, we need to recreate parameter file:</p> <p>File name: <code>para_op.par</code></p> <pre><code>Name Mode Type Min_Max Scope\nCN2 r f -0.4_0.2 all\nSOL_K r f 0.5_15.0 all\nSOL_ALB r f 0.01_5.00 all\nCH_K2 v f  -0.01_500.0 all\nALPHA_BNK v f 0.05_1.00 all\nTLAPS v f -10.0_10.0 all\nSLSUBSSN r f 0.05_25.0 all\nHRU_SLP r f 0.50_1.50 all\nOV_N r f 0.10_15.00 all\nESCO v f 0.01_1.00 all\n</code></pre> <p>The evaluation file is the same as the SA. But it is a good habit to rename it to <code>obj_op.evl</code></p> <p>\ud83d\udca1 Noted: Click this link to download related files(<code>para_op.par</code>, <code>obj_op.evl</code> and <code>val_op.evl</code> for validation).</p> <p>Finally, we can run the optimization within python script-based environment:</p> <pre><code>from swat_uq import SWAT_UQ\n\nprojectPath = \"E://swatProjectPath\" # Use your SWAT project path\nworkPath = \"E://workPath\" # Use your work path\nexeName = \"swat2012.exe\" # The exe name you want execute\n\n#Blew two files should be created in the workPath\nparaFileName = \"paras_sa.par\" # the parameter file you prepared\nevalFileName = \"obj_sa.evl\" # the evaluation file you prepared\n\nproblem = SWAT_UQ(\n   projectPath = projectPath, # set projectPath\n   workPath = workPath, # set workPath\n   swatExeName = exeName # set swatExeName\n   paraFileName = paraFileName, # set paraFileName\n   evalFileName = evalFileName, # set evalFileName\n   verboseFlag = True, # enable verboseFlag to check if setup is configured properly.\n   numParallel = 10 # set the parallel numbers of SWAT\n)\n\n# The SWAT-related Problem is completed. \n\nfrom UQPyL.optimization import PSO\n\npso = PSO(nPop = 50, maxFEs = 30000, verboseFlag = True, saveFlag = True)\n\npso.run(problem = problem)\n</code></pre> <p>The optimization results show:</p> <p>We list the optimal decision with NSE-&gt;0.88:</p> CN2 SOL_K SOL_ALB CH_K2 ALPHA_BNK TLAPS SLSUBSSN HRU_SLP OV_N ESCO -0.236 14.278 0.325 46.604 1.000 -5.532 1.611 0.515 3.162 0.010"},{"location":"zh/en/example_runoff_calibration/#validation","title":"Validation","text":"<p>We have obtained the optimal parameter settings for the SWAT model. Now, we proceed to perform validation.</p> <p>The evaluation file must first be prepared. Here, we apply the observed data ranging from 2017.1.1 to 2017.12.31.</p> <p>File name: <code>val_op.evl</code></p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_23 : ID of RCH, or SUB, or HRU\nCOL_2 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_1 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n\n1 2017 1 1 74.4\n2 2017 1 2 99.4\n3 2017 1 3 77.4\n...\n...\n365 2017 12 31 19.1\n</code></pre> <p>Using a Python script-based environment, we conduct the validation as follows:</p> <pre><code># optima\nX = np.array([-0.236, 14.278, 0.325, 46.604, 1.000, -5.532, 1.611, 0.515, 3.162, 0.010])\n\n# Perform validation\n# `problem.validate_parameters` expects the optimized parameters and the validation file.\n# It returns a dictionary containing two keys: 'objs' (objective values) and 'cons' (constraint violations).\nres = problem.validate_parameters(X, valFile = \"val_op.evl\") \n\n# Print the objective function values from the validation results\nprint(res[\"objs\"])\n</code></pre>"},{"location":"zh/en/example_runoff_calibration/#postprocessing","title":"Postprocessing","text":"<p>Except for sensitivity analysis and optimization, SWAT-UQ support to extract data from output files.</p> <pre><code>The `series.evl` should be prepared:\nSER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1 : Weight of series combination\nRCH_23  : ID of subbasin to be included in the objective function\nCOL_2 : Column ID of variables in output.rch\nFUNC_10     : Type of objective function (e.g., 1: NSE, 2: RMSE. 3:PCC, 4:Pbias, 5:KGE)\n2012/1/1 to 2016/12/31 : Period for data extraction\n</code></pre> <p>We can extract the data:</p> <pre><code>X = np.array([-0.236, 14.278, 0.325, 46.604, 1.000, -5.532, 1.611, 0.515, 3.162, 0.010])\n\n# Extract the corresponding series data based on the parameter set X\nattr = problem.extract_series(X, seriesFile=\"series.evl\")\n\n# The returned object 'attr' is a Python dictionary.\n# Simulation and observation data are stored separately by function type ('objSeries' or conSeries)objective function ID (objID) and series ID (serID). \n\nsimData = attr['objSeries'][1][1]['sim'] # Simulation data\nobData = attr['objSeries'][1][1]['obs']  # Observation data\n</code></pre>"},{"location":"zh/en/example_runoff_calibration/#apply-optima-to-project","title":"Apply optima to project","text":"<p>Now, we need to apply these values to the project folder:</p> <pre><code># Optimal parameter values\nX = np.array([-0.236, 14.278, 0.325, 46.604, 1.000, -5.532, 1.611, 0.515, 3.162, 0.010])\n\n# Apply parameters\nproblem.apply_parameters(X, replace=False)  \n# Setting 'replace=False' will apply the values to the working directory (workOriginPath) without modifying the original project files.\n\n# Alternatively\nproblem.apply_parameters(X, replace=True)  \n# Setting 'replace=True' will overwrite the original project folder, which is not recommended.\n</code></pre> <p>So far, the calibration work is completed.</p>"},{"location":"zh/en/example_runoff_calibration/#exercise-for-users","title":"Exercise for users","text":"<p>We provide an exercise based on the Xinfengjiang sub-basin, which is part of the Dongjiang watershed.</p> <p>You can download the complete project files here: Click here to download project files</p> <p>Within the downloaded project files, the observed data is stored in the file named <code>observed.txt</code>.</p> <p>If you have any questions or need assistance, feel free to contact us.</p>"},{"location":"zh/en/swat_uq_dev/","title":"SWAT-UQ-DEV","text":""},{"location":"zh/en/swat_uq_dev/#overview-of-dev-version","title":"Overview of DEV Version","text":"<p>SWAT-UQ-DEV is a Python package designed for script-based environments. It designs a Python class named <code>SWAT_UQ</code>, which inherits from <code>Problem</code> class of UQPyL. By instantiating <code>SWAT_UQ</code> class, users can directly access all methods and algorithms offered by UQPyL. In addition, <code>SWAT_UQ</code> contains a suite of built-in functions to streamline and accelerate the process of building and solving practical problems (e.g., model calibration, best management practices).</p> <p>The SWAT-UQ-DEV is particularly suited for users who wish to customize their workflows, integrate with UQPyL, or other Python tools.</p>"},{"location":"zh/en/swat_uq_dev/#key-features","title":"Key Features","text":"<ol> <li> <p>Parallel Execution: Both data I/O operations within project folder and SWAT model simulations support parallelization. ( \ud83c\udf89 Benchmark tests on a 40-core server demonstrate that the current code version can stably run up to 80 SWAT instances concurrently.)</p> </li> <li> <p>File Control: For model calibration tasks \u2014 such as streamflow and water quality,  users only need to prepare a set of <code>.txt</code> files to complete the entire setup process. </p> </li> <li> <p>Workflow Integration: With the support of  UQPyL, users can efficiently carry out the complete modelling-based workflows: sensitivity analysis -&gt; optimization -&gt; back-substitution.</p> </li> </ol>"},{"location":"zh/en/swat_uq_dev/#installation","title":"Installation","text":"<p>Recommended (PyPi or Conda):</p> <pre><code>pip install -U swatuq\n</code></pre> <pre><code>conda install swatuq --upgrade\n</code></pre>"},{"location":"zh/en/swat_uq_dev/#quick-start","title":"Quick Start","text":"<p>Here, we provide a step-by-step guide to solving SWAT-based problems with SWAT-UQ-DEV.</p> <p>To get started, instantiate the <code>SWAT-UQ</code> class, which inherits from the <code>Problem</code> class in UQPyL. This will enable all accesses to methods and algorithms available in UQPyL (see the UQPyL Project).</p> <p>Some preparatory works are required:</p> <p>Step 1: Obtain a SWAT project folder (named SWAT Project Folder for convenience).</p> <p>Step 2: Create separate folder  as Work Folder to store control files for setting up your problems, as well as temporary files used when running the SWAT model in parallel.</p> <p>Step 3: In the Work Folder, create a parameter file encoded in UTF-8. This file would show the details of the parameters you want to analyze or optimize, as shown below:</p> <p>File name: <code>paras.par</code></p> <p>\ud83d\udca1 Noted:  The file name is not restricted, but it is recommended to use the <code>.par</code> extension for consistency with the GUI version. In this file, all elements must be separated by spaces or tabs.</p> <pre><code>Name Type Mode Min_Max Scope\nCN2 r f -0.4_0.2 all\nGW_DELAY v f 30.0_450.0 all\nALPHA_BF v f 0.0_1.0 all\nGWQMN v f 0.0_500.0 all\n... \nSMFMN v f 0.0_20.0 all\nTIMP v f 0.01_1.0 all\nSURLAG v f 0.05_24.0 all\n</code></pre> <p>The first line should be kept as a hint for users.</p> <p>Following line of the parameter file should be structured by <code>Name</code>, <code>Mode</code>, <code>Type</code>, <code>Min_Max</code> and <code>Scope</code>:</p> <ul> <li>Name: Any parameter occurred in <code>.gw</code>, <code>.hru</code>, <code>.mgt</code>, <code>.sol</code>, <code>.rte</code>, <code>.sub</code>, <code>.sep</code>, <code>.swq</code> files can be wrote. The only requirement is that the parameter names used here must exactly match those in the SWAT project file. (Totally support 308 parameters). For parameters in <code>*.sol</code> files, it is possible to modify values for specific layers. For example:</li> </ul> <pre><code>SOL_K(2) r f 0.5_15.0 all    # Modify only the second layer\nSOL_K(3) r f 0.5_15.0 all    # Modify only the third layer\nSOL_K r f 0.5_15.0 all       # Modify all layers\n</code></pre> <ul> <li>Mode: The title 'Mode' means assigning mode of parameters, which is represented by a single character, e.g., <code>r</code>, <code>v</code>, <code>a</code>. </li> <li>where <code>val</code> is the value in this parameter file, and <code>originVal</code> is the origin value of SWAT project files.</li> <li><code>r</code> denotes relative assignment. The true value would be calculated by (1+val)*originVal.</li> <li><code>v</code> denotes absolute assignment, directly use <code>val</code>.</li> <li><code>a</code> denotes for adding assignment, the true value is calculated by originVal+val.</li> <li>Type: The title 'Type' denotes the variable types of parameters, i.e., <code>i</code> - int, <code>f</code> - float, <code>d</code> - discrete.  </li> <li>Min_Maz: The title 'Min' is the lower bound of the parameter. The title 'Max' is the upper bound of the parameter.</li> <li>Scope: The title 'Scope' means the target scope of the parameter. By default, it sets to <code>all</code> - the parameter would be modified globally. Alternatively, you can specify a particular BSN ID or a combination of SUB ID and HRU IDs to apply the parameter selectively. For example:</li> </ul> <pre><code>CN2 r f -0.4_0.2 all # Default Scope\nCN2 r f -0.4_0.2 3(1,2,3,4,5,6,7,8,9) 4(1,2,3,4) 5 # Appoint Scope\n</code></pre> <p>The format follows either:  - <code>SUB ID</code> - apply the parameter to all HRUs within the specified basin  - <code>SUB ID(HRU ID_1, HRU ID_2, ..., HRU ID_N)</code> - apply the parameter to specific HRUs within the given basin</p> <p>Different basin should be separated by spaces or tabs.</p> <p>Step 4: In the Work Folder, create an evaluation file encoded UTF-8, used to construct objective or constraint functions using observed data.</p> <p>File Name: <code>eval.obj</code> </p> <p>\ud83d\udca1 Noted:  It is also recommended to use the <code>.obj</code> extension for consistency with the GUI version.</p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_23 : ID of RCH, or SUB, or HRU\nCOL_2 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_1 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n\n1 2012_1 2.1\n2 2012_2 3.2\n3 2012_3 3.5\n4 2012_4 6.7\n5 2012_5 14.55\n6 2012_6 21.54\n...\n12 2012_12 22.44\n</code></pre> <p>The evaluation file can consists of multiple data series, which may correspond to different locations, output variable, or time periods.</p> <p>In this example, just one data series is shown.</p> <p>Each series consists of two parts: a. Head Definition; b. Data Section.</p> <p>Head Definition: (Following label <code>ID</code> or <code>NUM</code> should be replaced by a number) - SER_ID: The <code>ID</code> should be an unique label for different data series. - OBJ_ID or CON_ID: The <code>OBJ</code> or <code>CON</code> determine the type of the data series. And this <code>ID</code> denotes the unique label of objective or constraint functions.     \ud83d\udca1 Noted: SWAT-UQ-DEV support the multiple series set the same <code>OBJ ID</code> or <code>CON ID</code> - WGT_NUM: The <code>NUM</code> denotes the linear weight for combing series obtaining the same <code>OBJ ID</code> or <code>CON ID</code>. - RCH_ID, SUB_ID or HRU_ID: The <code>RCH</code>, <code>SUB</code> or <code>HRU</code> determine the type of output file loaded. The <code>ID</code> should be consistent with the SWAT project (which RCH, SUB, HRU) and can be set according to your requirements. - COL_NUM: The <code>NUM</code> specifies which data columns to extract from the <code>output.rch</code>, <code>output.hru</code> or <code>output.sub</code> file (Please see following table for checking valid values).  - FUNC_NUM: The <code>NUM</code> defines the objective function type to compare observed and simulated data. (Valid values: 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min)</p> <p>The valid values of <code>COL_NUM</code> (extract variable) in <code>output.rch</code>, <code>output.hru</code>, <code>output.sub</code> can be:</p> File Name Valid Value output.rch 1-FLOW_IN, 2-FLOW_OUT, 3-EVAP, 4-TLOSS, 5-SED_IN, 6-SED_OUT, 8-ORGN_IN, 9-OGRN_OUT, 10-ORGP_IN, 11-ORGP_OUT, 12-NO3_IN, 13-NO3_OUT, 14-NH4-IN, 15-NH4-OUT, 16-NO2_IN, 17-NO2_OUT, 18-MINP_IN, 19-MINP_OUT, 20-CHLA_IN, 21-CHLA_OUT, 22-CBOD_IN, 23-CBOD_OUT ... 38-BACTP_OUT, 39-BACTLP_OUT... 43-TOT_N, 44-TOT_P output.sub 1-PRECIP, 2-SNOMELT, 3-PET, 4-ET, 5-SW, 6-PERC, 7-SURQ, 8-GW_Q, 9-WYLD, 10-SYLD, 11-ORGN, 12-ORGP, 13-NSURQ, 14-SOLP, 15-SEDP output.hru 1-PRECIP, 2-SNOFALL, 3-SNOMELT, 4-IRR, 5-PET, 6-ET, 7-SW_INIT, 8-SW_END, 9-PERA, 10-GW_RCHG, 11-DA_RCHC, 12-REVAP ... 49-NUP, 50-PUP ...67-BACTP, 68-BACTLP <p>\ud83d\udca1 Noted: The numbers above are taken from the SWAT Manual. Alternatively , you can manually count the order of the target variable by checking the output file.</p> <p>Data Section is structured by <code>NUM</code>, <code>YEAR_INDEX</code>, <code>DATA</code>. And there is no need for continuous: - NUM: Not used in SWAT-UQ-DEV, only for data integrity checking. - YEAR_INDEX: The value of <code>YEAR</code> means the year index for the data. The value of <code>INDEX</code> is the day number when SWAT outputs daily data, otherwise the month number, determined by <code>IPRINT</code> in <code>file.cio</code> of SWAT project.  - DATA: The type of data can be int or float.</p> <p>For example: <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_23 : ID of RCH, or SUB, or HRU\nCOL_6 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_1 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n2012/1/1 to 2018/12/31 : Period for data extraction\n</code></pre> Therefore, the period (2012/1/1 to 2018/12/31) would be extracted.</p> <p>Step 5: Build your problem in Python script environment.</p> <p><pre><code># First import SWAT_UQ class\nfrom swatuq import SWAT_UQ\n\n# Second define requirement variables:\n\nprojectPath = \"E://swatProjectPath\"  # your SWAT Project Path\nworkPath = \"E://workPath\" # your Work Path\nexeName = \"swat2012.exe\" # the name of swat.exe you want to run\nparaFileName = \"paras.par\" # the parameter file you prepared\nevalFileName = \"eval.obj\" # the evaluation file you prepared\n\nproblem = SWAT_UQ(\n   projectPath = projectPath, # set projectPath\n   workPath = workPath, # set workPath\n   swatExeName = exeName # set swatExeName\n   paraFileName = paraFileName, # set paraFileName\n   evalFileName = evalFileName, # set evalFileName\n   verboseFlag = True, # enable verboseFlag to check if setup is configured properly.\n   numParallel = 2 # set the number of parallels\n)\n\n# The SWAT-related Problem is completed. You can enjoy all methods and algorithms of UQPyL.\n\n#For example:\nfrom UQPyL.optimization.single_objective import GA\n\nga = GA()\nga.run(problem = problem)\n</code></pre> \ud83d\udca1 Noted: For more detailed usage of UQPyL, please check UQPyL Documentation</p> <p>Step 6: apply optimal parameters to project folder</p> <pre><code># X should be a list or a NumPy 1D or 2D array\nproblem.apply_parameter(X, replace=False)  # Applies parameters X to workOriginPath without modifying the original project files\nproblem.apply_parameter(X, replace=True)   # Applies parameters X directly to the original project directory\n</code></pre>"},{"location":"zh/en/swat_uq_gui/","title":"SWAT-UQ-GUI","text":""},{"location":"zh/en/swat_uq_gui/#overview-of-gui-version","title":"Overview of GUI Version","text":"<p>\ud83d\udca1 Noted: SWAT-UQ-GUI is still in demo stage (Now, we advise to use SWAT-UQ-DEV). Feel free to give it a try \u2014 the full version is on the way!</p> <p>SWAT-UQ-GUI is designed for parameter uncertainty quantification (UQ) of the SWAT model. Its core functionalities are built upon UQPyL, our public released Python package for UQ. A key advantage of this platform is that users do not need to worry about coding. It seamlessly automates complete workflow from sensitivity analysis to parameter optimization, result checking, finally data visualization.</p> <p> </p> <p>Figure 1. Get Start Card</p> <p>SWAT-UQ-GUI consists of three modules corresponding to preparation, execution, and post-processing.  As Figure 1 shows, preparation involves Parameter Setting, Objective Define; Execution includes Sensibility Analysis, Problem Optimization, Result Validation &amp; Apply; Post-processing provide interface for histogram (Visualization A) and point-line figure (Visualization B).</p>"},{"location":"zh/en/swat_uq_gui/#key-features","title":"Key Features","text":"<p>End-to-end visualization: SWAT-UQ-GUI supports fully visualized operations across the entire workflow \u2014 from problem definition and sensitivity analysis to optimization and final result validation.</p> <p>Modular &amp; Extensible Architecture: SWAT-UQ-GUI adopts a modular structure that's easy to extend \u2014 new methods and tools can be integrated without disrupting existing workflows.</p>"},{"location":"zh/en/swat_uq_gui/#quick-start","title":"Quick Start","text":"<p>Here, we provide a Quick Start. In future plans, we will provide detailed documentation and videos.</p> <p>Please choose the latest release version of SWAT-UQ.</p> <p>Demo Version has been released: SWAT-UQ</p> <p>Step1: On the Get Started interface, click the New Project card to create a project or the Open Project card to open an existing one. You can also select the Example card for reference cases or the Help card for assistance.</p> <p> </p> <p>Figure 2. New Project Card and Open Project Card</p> <p>For the New Project Card (left picture of Figure 2), users need to provide the following information: the UQ Project name, the UQ Project path, and the SWAT Project path. After these inputs are provided, the program will verify the validity of the SWAT project files. If the verification is successful, other modules will be activated. Once the UQ Project is created, a project file named *.prj (where * represents the UQ Project name set by the user) will be saved in the specified UQ Project path.  </p> <p>For the Open Project Card (right picture of Figure 2), users should select the folder that contains *.prj files. SWAT-UQ will then check the validity of the project file before proceeding.  </p> <p>Step2: On the Parameter Setting and Objective Definition, the parameter file (.par) and the objective file (.obj) should be created. These files are crucial as they specify which parameters will be modified and what objectives will be evaluated by the program.</p> <p> </p> <p>Figure 3. Parameter Setting Card and Figure 4. Objective Define Card</p> <p>To be specific, as shown in Figure 3, the Parameter Setting Card enables users to define the parameters they wish to tune. There are two ways to add parameters to the information table: either by importing them from an existing file or by clicking the Add button to open the Parameter Selection widget. In this table, all selectable parameters are organized by the suffix of the SWAT project files. Additionally, the search bar provides a convenient way to locate specific parameters quickly.</p> <p></p> <p>Figure 4. Parameter Setting Table </p> <p>After adding parameters, users can set the tuning mode, lower and upper bounds, and specify tuning files (default: all) for each parameter (Figure 3 shows). Finally, these settings should be saved to the UQ project folder by clicking \"Saving Current Parameter\" button.</p> <p>There are also two ways to define the objective function: by importing from existing files or by user definition. For user definition, you should click \"Add\" button. </p> <p></p> <p>Figure 5. Objective Define Table </p> <p>As shown in Figure 5, users need to accurately fill in the objective ID, series ID, objective type, variable type, weight, and other relevant information. It is important to note that both the series ID and objective ID can be repeated, allowing for combinations of multiple series or weighted combinations of series. For more details, please refer to the comprehensive documentation.</p> <p>After defining objectives, you can save them to the objective file. It is also allowed to define multiple objective functions within a single file.</p> <p>Step3: Perform sensitivity analysis or parameter optimization as needed. </p> <p>Using Sensitivity Analysis as an example, as shown in the left image of Figure 6, users should first select the parameter file and objective file. Next, they choose the desired sensitivity analysis method and sampling technique. Users can then configure additional settings as required, fine-tuning the hyper-parameters to best meet project needs before proceeding. SWAT-UQ thoughtfully displays the number of parameters and the total sample size to assist users in making informed decisions.</p> <p>Once all initial settings are all ready, click the \"Next\" button to proceed to the simulation and analysis process. The right image of Figure 6 displays the settings of simulation, including the selection of SWAT executable file, parallel numbers and problem name. Finally, click the \"Initialize,\" \"Sampling,\" and \"Simulation\" buttons in sequence, and wait for simulation completing. SWAT-UQ can display the simulation progress in real-time, and users can also pause it to reconfigure settings. It would save the analysis result into UQ project folder (./Result/data/). The result file would be used to check or draw visualization picture.</p> <p> </p> <p> Figure 6. Sensibility Analysis Interface </p> <p>For parameter optimization, users should still select parameter file and objective file at first. When users check more than two objectives, the multi-objective optimization would be activated; conversely, if only one objective is selected, single-objective optimization is used. After fine-tuning hyper-parameters, the optimization process would be started, like sensibility analysis. SWAT-UQ can display the optimization progress in real-time, along with the optimal parameter values for each iteration.</p> <p> </p> <p> Figure 7. Parameter Optimization Interface </p> <p>Here, we list the available sensibility analysis method and optimization method.</p> <p>Sensibility Analysis: - Sobol' - Delta Test (DT) #TODO - Extended Fourier Amplitude Sensitivity Test (eFAST) - Random Balance Designs - Fourier Amplitude Sensitivity Test (RBD-FAST) - Multivariate Adaptive Regression Splines-Sensitivity Analysis (MARS-SA) #TODO - Morris - Regional Sensitivity Analysis (RSA)</p> <p>Optimization Algorithm: ( indicates solving computational expensive optimization problem) - Single Objective Optimization: SCE-UA, ML-SCE-UA, GA, CSA, PSO, DE, ABC, ASMO (#TODO), EGO (#TODO) - Multi-Objective Optimization: MOEA/D, NSGA-II, RVEA, MOASMO (#TODO)</p> <p>Step 4: Result Validation and Apply. On Result Validation &amp; Apply interface, SWAT-UQ allows users to simulate a specific set of parameters individually and extract the desired time series data, or apply the optimal parameters directly to the SWAT project files. This parameter set can be user-defined or sourced from completed optimization result files.</p> <p></p> <p> Figure 8. Result Validation Interface </p> <p>Step 5: Result Visualization. The current SWAT-UQ provides two types of plot pictures: a bar chart for sensitivity analysis (Visualization A Interface) and an iteration convergence plot for parameter optimization (Visualization B Interface). Of course, additional types of plots will be continuously added in future versions. Figures 9 and 10 shows the visualization pictures from two interfaces.</p> <p></p> <p> Figure 9. Sensibility Analysis Visualization </p> <p></p> <p> Figure 10. Optimization Visualization </p> <p>Specifically, On the Visualization A and Visualization B, user can select the result file. SWAT-UQ would generates initial visualizations. Users can click the \"Config\" button to open the settings panel and tune various parameters of the plot based on the preset values, as Figure 11 indicates.</p> <p> </p> <p> Figure 11. Visualization Interface </p> <p>This concludes the Quick Start section for SWAT-UQ. For more advanced operations, please refer to the documentation.</p>"},{"location":"zh/zh/","title":"\u6b22\u8fce\u4f7f\u7528 SWAT-UQ \u4e2d\u6587\u6587\u6863","text":"<p>SWAT-UQ \u662f UQPyL \u9879\u76ee\u7684\u6269\u5c55\u7248\u672c\uff0cUQPyL\u662f\u4e00\u4e2a\u529f\u80fd\u5168\u9762\u7684\u4e0d\u786e\u5b9a\u6027\u5206\u6790\u4e0e\u53c2\u6570\u4f18\u5316\u5e73\u53f0\u3002SWAT-UQ\u7684\u76ee\u6807\u662f\u5c06UQPyL\u4e0eSWAT\u65e0\u7f1d\u96c6\u6210\uff0c\u4f7f\u7528\u6237\u80fd\u591f\u8f7b\u677e\u5f00\u5c55\u654f\u611f\u6027\u5206\u6790\u3001\u5355\u76ee\u6807\u4f18\u5316\u3001\u591a\u76ee\u6807\u4f18\u5316\u7b49\u4efb\u52a1\u3002</p> <p>\u76ee\u524d SWAT-UQ \u63d0\u4f9b\u4e24\u4e2a\u7248\u672c\uff0c\u6ee1\u8db3\u4e0d\u540c\u7c7b\u578b\u7528\u6237\u7684\u9700\u6c42\uff1a</p> <ul> <li>SWAT-UQ-DEV\uff08\u5f00\u53d1\u8005\u7248\u672c\uff09\uff1a\u9002\u7528\u4e8e\u9700\u8981\u9ad8\u5ea6\u7075\u6d3b\u6027\u548c\u81ea\u5b9a\u4e49\u5efa\u6a21\u6d41\u7a0b\u7684\u9ad8\u7ea7\u7528\u6237\u3002</li> <li>SWAT-UQ-GUI\uff08\u56fe\u5f62\u754c\u9762\u7248\u672c\uff09\uff1a\u63d0\u4f9b\u76f4\u89c2\u7684\u56fe\u5f62\u5316\u754c\u9762\uff0c\u7b80\u5316\u64cd\u4f5c\u6d41\u7a0b\uff0c\u9002\u5408\u5e0c\u671b\u5c3d\u91cf\u51cf\u5c11\u7f16\u7a0b\u7684\u7528\u6237\u3002</li> </ul> <p>\u501f\u52a9SWAT-UQ\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u5f3a\u5927\u7684\u4e0d\u786e\u5b9a\u6027\u5206\u6790\u4e0e\u4f18\u5316\u529f\u80fd\u65e0\u7f1d\u878d\u5165\u57fa\u4e8eSWAT\u7684\u6c34\u6587\u5efa\u6a21\u9879\u76ee\u4e2d\u3002</p>"},{"location":"zh/zh/#_1","title":"\ud83d\udd17 \u9879\u76ee\u6982\u89c8","text":"<ul> <li>\u5b98\u7f51\uff1a\u5b98\u65b9\u7f51\u7ad9\uff08\u5f85\u66f4\u65b0\uff09</li> <li>\u6e90\u4ee3\u7801\uff1aGitHub \u4ed3\u5e93</li> <li>\u6587\u6863\u8d44\u6599\uff1a\u67e5\u770b\u6587\u6863</li> <li>\u5f15\u7528\u4fe1\u606f\uff1aSWAT-UQ\uff08\u672a\u6765\u8ba1\u5212\u4e2d\uff09</li> </ul>"},{"location":"zh/zh/#_2","title":"\ud83d\ude80 \u5feb\u901f\u5165\u95e8","text":"<ul> <li>\u6559\u7a0b<ul> <li>SWAT-UQ-DEV \u4f7f\u7528\u6559\u7a0b</li> <li>SWAT-UQ-GUI \u4f7f\u7528\u6559\u7a0b</li> </ul> </li> <li>\u793a\u4f8b\u96c6\u5408<ul> <li>\u793a\u4f8b\u4e00\uff1a\u5f84\u6d41\u6821\u51c6</li> <li>\u793a\u4f8b\u4e8c\uff1a\u6700\u4f73\u5de5\u7a0b\u7ba1\u7406</li> </ul> </li> </ul>"},{"location":"zh/zh/#uq","title":"\u2b50 UQ \u9879\u76ee\u7cfb\u5217","text":"<ul> <li>UQPyL\uff1a\u7528\u4e8e\u4e0d\u786e\u5b9a\u6027\u91cf\u5316\u4e0e\u53c2\u6570\u4f18\u5316\u7684 Python \u5de5\u5177\u5305\u3002</li> </ul> UQPyL\u529f\u80fd\u603b\u89c8 <ul> <li>SWAT-UQ\uff1a\u901a\u8fc7\u811a\u672c\u5f00\u53d1\u7248\u4e0e\u56fe\u5f62\u754c\u9762\u7248\uff0c\u5c06UQPyL\u4e0eSWAT\u6a21\u578b\u6709\u673a\u878d\u5408\u3002</li> </ul> SWAT-UQ\u56fe\u5f62\u754c\u9762\u7248\u672c"},{"location":"zh/zh/best_management_practices/","title":"Example 2: Best Management Practices for the Four Lake watershed","text":""},{"location":"zh/zh/best_management_practices/#background","title":"Background","text":"<p>When watersheds are impacted by nonpoint source pollution, the integration of the SWAT model with best management practices (BMPs) has proven to be a reliable and effective tool. This example refers to the article(Long et al, 2025). </p> <p>Information about Four Lake watershed</p> <p>The Four Lake watershed locates in the middle reaches of the Yangtze River and the hinterland of the Jianghan Plain. For studying the transportation of water quality in this watershed, we build the SWAT model first. The data set used includes:</p> <ul> <li>DEM - The ASTER GDEM with a spatial resolution of 30 meters</li> <li>Land Use - The CNLUCC (China Land-Use/Cover Change) dataset </li> <li>Soil Data - The Second National Land Survey of Nanjing Soil Institute 1:1 million Soil Counts</li> <li>Meteorological Data - Regional Surface Meteorological Factor-Driven Dataset for China</li> <li>Runoff Observation - Runoff of Hydrographic Yearbook. (2008.1.1 to 2021.12.31)</li> <li>Water Quality Observation - China National Environmental Monitoring Center (2020.11 to 2021.12)</li> </ul> <p>The calibration of runoff and water quality is omitted here, with a primary focus on the process of Best Management Practices (BMPs). In China, Total Nitrogen (TN) and Total Phosphorus (TP) concentrations are critical indicators for assessing lake water quality. The distributions of TN and TP in 2021.12.31 are show blew:</p> <p> </p> <p>The distributions of TN and TP in the Four Lake basin</p> <p>In the SWAT model applied in this study, the main lake is situated within sub-basin 32. Accordingly, particular attention should be directed toward sub-basin 51, which serves as the primary inflow region. Furthermore, management practices should be prioritized in the identified critical source areas, namely sub-basins 1, 13, 14, 20, and 31.</p>"},{"location":"zh/zh/best_management_practices/#optimization","title":"Optimization","text":"<p>In SWAT, there are many built-in BMPs, e.g., the terracing operation (BMP1), the tile drainage (BMP2) ... the filter strip (BMP4) ... the grassed waterways (BMP7). </p> <p>For reduce TN and TP, the BMP4 and BMP7 are commonly utilized. Considering the cost, this example only focuses on the critical sub-basins like 1, 13, 14, 20, and 31.</p> <p>The .ops files in SWAT project control and set BMPs to simulated the watershed. The parameters involving the filter strip are:</p> <ul> <li>FILTER_I: Indicator for filter strip simulation (1 for active, 0 for inactive).</li> <li>FILTER_RATIO: The ratio of field area to filter strip area (ha/ha). Range: 0\u2013300.</li> <li>FILTER_CON: Fraction of the HRU area where 10% is densely vegetated and evenly distributed along the filter strip. This 10% area can intercept 25\u201375% of surface runoff.</li> <li>FILTER_CH: Fraction of the 10% dense area occupied by fully channelized flow (dimensionless). Fully channelized flow is not filtered by the strip.</li> </ul> <p>The parameters about grassed waterways are:</p> <ul> <li>GWATI: Indicator for vegetative channel simulation (1 for active, 0 for inactive).</li> <li>GWATN: Manning's roughness coefficient for overland flow within the vegetative channel.</li> <li>GWATSPCON: Linear parameter for calculating sediment transport capacity in the vegetative channel.</li> <li>GWATD: Depth of the vegetative channel (m). If not specified, it is set to 3/64 of GWATW.</li> <li>GWATW: Average width of the vegetative channel (m).</li> <li>GWATL: Length of the vegetative channel (km).</li> <li>GWATS: Average slope of the vegetative channel (m/m).</li> </ul> <p>To simplify the setting of BMPs, this example only optimize five parameters for a sub-basin, i.e., FILTER_I, FILTER_RATIO, GWATI, GWATW, and GWATL, resulting in a total of 25 variables. In addition, the optimization objectives including the reduction of TN and TP loads, as well as the costs associated with these BMPs. Therefore, this example is a multi-objective optimization problem involving a mixture of parameters.</p> <p>The key information (variable types and ranges) of optimization parameters can be concluded as follows:</p> Name Type Range Unit FILTER_I int 0-1 none FILTER_RATIO float 1-300 none GWATI int 0-1 none GWATW discrete 1, 5, 10, 15, 20, 25, 30 m GWATL float 10-1000 km <p>The first step is to prepare the parameter files. In contrast to Example 1, the BMP parameters differ among sub-basins. Consequently, each sub-basin requires an independent definition of all relevant parameters. In addition, the discrete parameter GWATW represents all possible values in the 'Min_Max' field by linking them with an underscore ('_'):</p> <pre><code>GWATW v d 1_5_10_15_20_25_30 1\n</code></pre> <p>The complete parameter file is:</p> <p>File name : <code>para_bmp.par</code></p> <pre><code>Name Mode Type Min_Max Scope\nFILTER_I v i 0_1 1\nFILTER_RATIO v f 1_300 1\nGWATI v i 0_1 1\nGWATW v d 1_5_10_15_20_25_30 1\nGWATL v f 10_1000 1\nFILTER_I v i 0_1 13\nFILTER_RATIO v f 1_300 13\nGWATI v i 0_1 13\nGWATW v d 1_5_10_15_20_25_30 13\nGWATL v f 10_1000 13\nFILTER_I v i 0_1 14\nFILTER_RATIO v f 1_300 14\nGWATI v i 0_1 14\nGWATW v d 1_5_10_15_20_25_30 14\nGWATL v f 10_1000 14\nFILTER_I v i 0_1 20\nFILTER_RATIO v f 1_300 20\nGWATI v i 0_1 20\nGWATW v d 1_5_10_15_20_25_30 20\nGWATL v f 10_1000 20\nFILTER_I v i 0_1 31\nFILTER_RATIO v f 1_300 31\nGWATI v i 0_1 31\nGWATW v d 1_5_10_15_20_25_30 31\nGWATL v f 10_1000 31\n</code></pre> <p>\ud83d\udca1 Noted: This file supports parameters with the same name, as they are distinguished by their indices.</p> <p>Before editing the <code>evl</code> file, three objectives should be introduced. The first objective is the reduction of TN:</p> <p>Obj_1 = \\left ( TN_{base} - TN_{now}\\right ) / TN_{base}</p> <p>where TN_{base} and TN_{now} denote the total amount of TN flowing out of the 51 sub-basin before and after the application of BMPs, respectively.</p> <p>The second objective is the reduction of TP:</p> <p>Obj_2 = \\left ( TP_{base} - TP_{now}\\right ) / TP_{base}</p> <p>where TP_{base} and TP_{now} denote the total amount of TP flowing out of the 51 sub-basin before and after the implementation of BMPs, respectively.</p> <p>The third objective is the cost of BMPs. The unit cost of filter strip is 420 Yuan/ha, while the grassed waterways is 200 Yuan/ha. Therefore, for a sub-basin, the cost is:</p> <p>cost_{filter}^i = Area_{AGRI}^i*FILTER_RATIO*FILTER_I*420</p> <p>cost_{gwat}^i = GWATW* GWATL/10*GWATI*200</p> <p>Obj_3 = \\sum{cost_{filter}^i + cost_{gwat}^i}, i\\in \\left \\{ 1,13,14,20,31 \\right \\}</p> <p>where Area_{AGRI} represents the area of agricultural land use.</p> <p>In this example, the computation of the objectives cannot be performed solely using the <code>*.eval</code> file. However, the necessary data can be obtained from the file, after which the <code>objFunc</code> or <code>conFunc</code> can be defined manually by the user.</p> <p>For the first two objectives, the total amounts of TN and TP flowing out of the sub-basin 51 during 2021 are required.</p> <p>Therefore, the <code>eval</code> file can be:</p> <p>File name : <code>obj_bmp.evl</code></p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_51 : ID of RCH, or SUB, or HRU\nCOL_42 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_7 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n2021.1.1 to 2021.12.31 : \n\nSER_2 : ID of series data\nOBJ_2 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_51 : ID of RCH, or SUB, or HRU\nCOL_43 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_7 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n2021.1.1 to 2021.12.31 : Period for data extraction\n</code></pre> <p>Then, the <code>userObjFunc</code> should be implemented. The <code>userObjFunc</code> would accept a python dict named <code>attr</code> that contain several built-in keywords, e.g., <code>x</code>, <code>objs</code>, <code>cons</code>, <code>objSeries</code>, <code>conSeries</code>, <code>HRUInfos</code>. </p> <p>API: <pre><code>attr -&gt; a python dict\n\nkeywords:\n\n- x : The input decision, np.1darray\n- objs : The objective values of this input decision, a python dict, use `attr['objs'][objID]` defined by the *.evl file\n- cons : Similar to objs\n- objSeries : A python dict records the series defined by the *.evl file, use `attr['objSeries'][objID][serID]`\n- conSeries : Similar to objSeries\n- HRUInfos : A pandas table that records the information about HRU, columns are [\"HRU_ID\", \"SUB_ID\", \"HRU_Local_ID\", \"Slope_Low\", \"Slope_High\", \"Luse\", \"Area\"]\n</code></pre></p> <p>Now, the <code>userObjFunc</code> can be implemented by:</p> <pre><code># Define base total nitrogen (TN) and total phosphorus (TP) loads for normalization\n\nTN_Base = 3.314e7  # Baseline total nitrogen load (unit depends on context)\nTP_Base = 3.717e6  # Baseline total phosphorus load\n\n# Define the list of Basin IDs where BMPs (Best Management Practices) are applied\nBasins = [1, 13, 14, 20, 31]\n\ndef userObjFunc(attr):\n    \"\"\"\n    User-defined objective function.\n\n    Parameters:\n    - attr: dict\n        Contains input decision variables, objective values, constraint values,\n        time series for objectives and constraints, and HRU (Hydrological Response Unit) information.\n\n    Returns:\n    - objs: np.ndarray\n        Array containing computed objective values [obj_1, obj_2, obj_3].\n    \"\"\"\n\n    objs = np.zeros(3)  # Initialize three objective values\n\n    # Extract decision variables (not used directly here, kept for potential future needs)\n    x = attr[\"x\"]\n\n    # Compute the first objective:\n    # Relative reduction in TN load compared to baseline\n    objs[0] = (TN_Base - attr['objs'][1]) / TN_Base\n\n    # Compute the second objective:\n    # Relative reduction in TP load compared to baseline\n    objs[1] = (TP_Base - attr['objs'][2]) / TP_Base\n\n    # Compute the third objective: Total cost of BMP implementations\n    HRUInfosTable = attr[\"HRUInfos\"]  # Extract HRU information table\n\n    cost = 0  # Initialize total cost\n\n    for i, ID in enumerate(Basins):\n        # Calculate the total area of the sub-basin\n        areas = np.sum(\n            HRUInfosTable.loc[\n                (HRUInfosTable.SUB_ID == ID),\n                \"Area\"\n            ].tolist()\n        )\n\n        # Extract BMP design parameters from decision variables\n        filter_I = x[5 * i]       # Filter switch\n        filter_ratio = x[5 * i + 1]  # Fraction of area treated by filter\n        graw_I = x[5 * i + 2]     # Graw BMP switch\n        graw_W = x[5 * i + 3]     # Graw BMP width\n        graw_L = x[5 * i + 4]     # Graw BMP length\n\n        # Calculate the cost of filter BMPs\n        cost_filter = areas * filter_ratio * filter_I * 420  # unit cost: 420 Yuan/ha\n\n        # Calculate the cost of Graw BMPs\n        cost_graw = graw_W * graw_L * graw_I /10 * 200  # unit cost = 200 Yuan/ha\n\n        # Accumulate total cost\n        cost += cost_filter + cost_graw\n\n    objs[2] = cost  # Assign total cost to the third objective\n\n    return objs\n</code></pre> <p>Unitl now, all preparatory work has been completed, and the optimization process can be conducted.</p> <pre><code>import numpy as np\nfrom swatuq import SWAT_UQ\nfrom UQPyL.optimization.multi_objective import NSGAII\n\nnInput = 25\nnOutput = 3\n\nprojectPath = \"E:\\\\BMPs\\\\TxtInOut\" # SWAT Project Path\nexeName = \"swat.exe\" # Name of swat execute program in SWAT Project Path\nworkPath = \"E:\\\\DJ_FSB\" # Work Path\nparaFileName = \"para_bmp.par\" # Name of parameter file in Work Path\nevalFileName = \"obj_bmp.evl\" # Name of evaluation file in Work Path \nspecialFileName = \"special_paras1.txt\" # Name of special parameter file in Work Path\n\nproblem = SWAT_UQ(projectPath = projectPath, swatExeName = exeName, \n                  specialFileName = specialFileName, workPath = workPath, \n                  paraFileName = paraFileName, evalFileName = evalFileName, \n                  verboseFlag = True, numParallel = 10,\n                  userObjFunc = userObjFunc, nOutput = 3, \n                  optType = [\"max\", \"max\", \"min\"])\n\nnsgaii = NSGAII(nPop = 100, maxFEs = 20000, saveFlag = True, verboseFlag = True, verboseFreq = 5)\n\nnsgaii.run(problem = problem)\n\n# The result would be save to `Result\\Data\\NSGAII_SWAT-UQ_D25_M3.hdf`\n</code></pre> <p>The visualization of BMP optimization shows below:</p>"},{"location":"zh/zh/example_runoff_calibration/","title":"Example 1: Runoff Calibration for the Dongjiang watershed","text":""},{"location":"zh/zh/example_runoff_calibration/#background","title":"Background","text":"<p>The Dongjiang watershed in Guangdong is a critical freshwater source, covering an area of over 35,000 square kilometers. It supplies water to several major cities, including Guangzhou, Shenzhen, and Hong Kong.</p> <p>In this study, we use the Fengshuba and XinFengJiang sub-basins of the Dongjiang watershed as examples for runoff calibration.</p> <p>We primarily present the calibration process for the Fengshuba sub-basin, which has a catchment area of 5,150 km\u00b2 and an average annual rainfall of 1,581 mm. But, for helping users familiar with SWAT-UQ, the calibration of the XinFengJiang sub-basin is provided as an additional exercise.</p>"},{"location":"zh/zh/example_runoff_calibration/#swat-modelling","title":"SWAT Modelling","text":"<p>For building SWAT model of Fengshuba sub-basin, the data set used includes:</p> <ul> <li>DEM - The ASTER GDEM with a spatial resolution of 30 meters</li> <li>Land Use - The RESDC (Resource and Environmental Science Data Center) dataset</li> <li>Soil Data - The HWSD (Harmonized World Soil Database)</li> <li> <p>Meteorological Data - The CMADS (China Meteorological Assimilation Driving Dataset)</p> </li> <li> <p>Observation - Runoff of Hydrographic Yearbook. (2008.1.1 to 2017.12.31)</p> </li> </ul> <p>For calibration, the simulation periods are:</p> <ul> <li>Warm up Period - 2008.1.1 to 2011.12.31</li> <li>Calibration Period - 2012.1.1 to 2016.12.31</li> <li>Validation Period - 2017.1.1 to 2017.12.31</li> </ul> <p>\ud83d\udca1 Noted: Click this link to download project files.</p>"},{"location":"zh/zh/example_runoff_calibration/#problem-define","title":"Problem Define","text":"<p>The definition of the problem refers to the process of transforming a practical problem into an abstract problem that can be described using mathematical formulas and code. </p> <p>In this example, the ultimate goal is to obtain the SWAT model whose output completely approximate to observed data. First, we need to identify the indicators to evaluate how well the SWAT model has been built. In hydrology, common indicators, e.g., NSE, R2, KGE, RMSE, PCC, and so on. Here, we use the NSE. </p> <p>Therefore, this practical problem can be abstracted into:</p> <p>Where x denotes the undetermined parameters of the SWAT model; NSE(\\cdot) denotes the NSE operation; sim denotes the simulation data obtained from running the SWAT model; ob denotes the observed data from Chinese year book; lb, ub denotes the lower and upper bound of each parameters.</p> <p>Next, based on this abstracted problem, we can describe it using code within the framework of SWAT-UQ.</p>"},{"location":"zh/zh/example_runoff_calibration/#sensitivity-analysis","title":"Sensitivity Analysis","text":"<p>First, we would conduct sensitivity analysis (SA) for SWAT model. Refer to SWAT Manual and the article(Liu et al, 2017), following parameters are selected for SA.</p> ID Abbreviation Where Assign Type Range P1 CN2 MGT Relative [-0.4, 0.2] P2 GW_DELAY GW Value [30, 450] P3 ALPHA_BF GW Value [0.0, 1.0] P4 GWQMN GW Value [0.0, 500.0] P5 GW_REVAP GW Value [0.02, 0.20] P6 RCHRG_DP GW Value [0.0, 1.0] P7 SOL_AWC SOL Relative [0.5, 1.5] P8 SOL_K SOL Relative [0.5, 15.0] P9 SOL_ALB SOL Relative [0.01, 5.00] P10 CH_N2 RTE Value [-0.01, 0.30] P11 CH_K2 RTE Value [-0.01, 500.0] P12 ALPHA_BNK RTE Value [0.05, 1.00] P13 TLAPS SUB Value [-10.0, 10.0] P14 SLSUBSSN HRU Relative [0.05, 25.0] P15 HRU_SLP HRU Relative [0.50, 1.50] P16 OV_N HRU Relative [0.10, 15.00] P17 CANMX HRU Value [0.0, 100.0] P18 ESCO HRU Value [0.01, 1.00] P19 EPCO HRU Value [0.01, 1.00] P20 SFTMP BSN Value [-5.0, 5.0] P21 SMTMP BSN Value [-5.0, 5.0] P22 SMFMX BSN Value [0.0, 20.0] P23 SMFMN BSN Value [0.0, 20.0] P24 TIMP BSN Value [0.01, 1.00] <p>As the tutorial introduce, we first prepare the parameter file:</p> <p>File name: <code>paras_sa.par</code></p> <pre><code>Name Mode Type Min_Max Scope\nCN2 r f -0.4_0.2 all\nGW_DELAY v f 30_450 all\nALPHA_BF v f 0.0_1.0 all\nGWQMN v f 0.0_500.0 all\nGW_REVAP v f 0.02_0.20 all\nRCHRG_DP v f 0.0_1.0 all\nSOL_AWC r f 0.5_1.5 all\nSOL_K r f 0.5_15.0 all\nSOL_ALB r f 0.01_5.00 all\nCH_N2 v f -0.01_0.30 all\nCH_K2 v f  -0.01_500.0 all\nALPHA_BNK v f 0.05_1.00 all\nTLAPS v f -10.0_10.0 all\nSLSUBSSN r f 0.05_25.0 all\nHRU_SLP r f 0.50_1.50 all\nOV_N r f 0.10_15.00 all\nCANMX v f 0.0_100.0 all\nESCO v f 0.01_1.00 all\nEPCO v f 0.01_1.00 all\nSFTMP v f -5.0_5.0 all\nSMTMP v f -5.0_5.0 all\nSMFMX v f 0.0_20.0 all\nSMFMN v f 0.0_20.0 all\nTIMP v f 0.01_1.00 all\n</code></pre> <p>Then, the evaluation file should be created:</p> <p>File name: <code>obj_sa.evl</code></p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_23 : ID of RCH, or SUB, or HRU\nCOL_2 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_1 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n\n1   2012 1 1    38.6\n2   2012 1 2    16.2\n3   2012 1 3    24.5\n4   2012 1 4    26.9\n5   2012 1 5    56.2\n6   2012 1 6    82.1\n7   2012 1 7    32.8\n8   2012 1 8    20.5\n9   2012 1 9    32.3\n10  2012 1 10   28.9\n11  2012 1 11   36.5\n...\n...\n...\n1821    2016 12 25  94.8\n1822    2016 12 26  106\n1823    2016 12 27  135\n1824    2016 12 28  87.4\n1825    2016 12 29  81.5\n1826    2016 12 30  94.9\n1827    2016 12 31  89.9\n</code></pre> <p>\ud83d\udca1 Noted: Click this link to download related files(<code>para_sa.par</code> and <code>obj_sa.evl</code>)</p> <p>Based on this evaluation file, SWAT-UQ would extract the data of Reach 23 from <code>output.rch</code> during 2012.1.1 to 2016.12.31. In addition, the NSE function is used to evaluate the performance of model outputs.</p> <p>Finally, we can conduct the sensitivity analysis within python script-based environment:</p> <pre><code>from swat_uq import SWAT_UQ\n\nprojectPath = \"E://swatProjectPath\" # Use your SWAT project path\nworkPath = \"E://workPath\" # Use your work path\nexeName = \"swat2012.exe\" # The exe name you want execute\n\n#Blew two files should be created in the workPath\nparaFileName = \"paras_sa.par\" # the parameter file you prepared\nevalFileName = \"obj_sa.evl\" # the evaluation file you prepared\n\nproblem = SWAT_UQ(\n   projectPath = projectPath, # set projectPath\n   workPath = workPath, # set workPath\n   swatExeName = exeName # set swatExeName\n   paraFileName = paraFileName, # set paraFileName\n   evalFileName = evalFileName, # set evalFileName\n   verboseFlag = True, # enable verboseFlag to check if setup is configured properly.\n   numParallel = 10 # set the parallel numbers of SWAT\n)\n\n# The SWAT-related Problem is completed. \n\n# Perform sensitivity analysis\nfrom UQPyL.sensibility import FAST\n\nfast = FAST()\n\n# Generate sample set\nX = fast.sample(problem = problem, N = 512)\n# Therefore, the shape of X would be (12288, 24). It would be time-consuming to evaluate.\n\n# Recommend: a. use Linux Serve Computer; b. use surrogate-based methods.\n\nY = problem.objFunc(X)\n\nres = fast.analyze(X, Y)\n\nprint(res)\n</code></pre> <p>The analysis results of FAST methods are shown below:</p> <p>We select the top 10 parameters to be calibrated, i.e., CN2, ALPHA_BNK, SOL_K, SLSUBBSN, ESCO, HRU_SLP, OV_N, TLAPS, SOL_ALB, CH_K2.</p>"},{"location":"zh/zh/example_runoff_calibration/#optimization","title":"Optimization","text":"<p>Based on the above sensitivity analysis, we need to recreate parameter file:</p> <p>File name: <code>para_op.par</code></p> <pre><code>Name Mode Type Min_Max Scope\nCN2 r f -0.4_0.2 all\nSOL_K r f 0.5_15.0 all\nSOL_ALB r f 0.01_5.00 all\nCH_K2 v f  -0.01_500.0 all\nALPHA_BNK v f 0.05_1.00 all\nTLAPS v f -10.0_10.0 all\nSLSUBSSN r f 0.05_25.0 all\nHRU_SLP r f 0.50_1.50 all\nOV_N r f 0.10_15.00 all\nESCO v f 0.01_1.00 all\n</code></pre> <p>The evaluation file is the same as the SA. But it is a good habit to rename it to <code>obj_op.evl</code></p> <p>\ud83d\udca1 Noted: Click this link to download related files(<code>para_op.par</code>, <code>obj_op.evl</code> and <code>val_op.evl</code> for validation).</p> <p>Finally, we can run the optimization within python script-based environment:</p> <pre><code>from swat_uq import SWAT_UQ\n\nprojectPath = \"E://swatProjectPath\" # Use your SWAT project path\nworkPath = \"E://workPath\" # Use your work path\nexeName = \"swat2012.exe\" # The exe name you want execute\n\n#Blew two files should be created in the workPath\nparaFileName = \"paras_sa.par\" # the parameter file you prepared\nevalFileName = \"obj_sa.evl\" # the evaluation file you prepared\n\nproblem = SWAT_UQ(\n   projectPath = projectPath, # set projectPath\n   workPath = workPath, # set workPath\n   swatExeName = exeName # set swatExeName\n   paraFileName = paraFileName, # set paraFileName\n   evalFileName = evalFileName, # set evalFileName\n   verboseFlag = True, # enable verboseFlag to check if setup is configured properly.\n   numParallel = 10 # set the parallel numbers of SWAT\n)\n\n# The SWAT-related Problem is completed. \n\nfrom UQPyL.optimization import PSO\n\npso = PSO(nPop = 50, maxFEs = 30000, verboseFlag = True, saveFlag = True)\n\npso.run(problem = problem)\n</code></pre> <p>The optimization results show:</p> <p>We list the optimal decision with NSE-&gt;0.88:</p> CN2 SOL_K SOL_ALB CH_K2 ALPHA_BNK TLAPS SLSUBSSN HRU_SLP OV_N ESCO -0.236 14.278 0.325 46.604 1.000 -5.532 1.611 0.515 3.162 0.010"},{"location":"zh/zh/example_runoff_calibration/#validation","title":"Validation","text":"<p>We have obtained the optimal parameter settings for the SWAT model. Now, we proceed to perform validation.</p> <p>The evaluation file must first be prepared. Here, we apply the observed data ranging from 2017.1.1 to 2017.12.31.</p> <p>File name: <code>val_op.evl</code></p> <pre><code>SER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1.0 : Weight of series combination\nRCH_23 : ID of RCH, or SUB, or HRU\nCOL_2 : Extract Variable. The 'NUM' is differences with *.rch, *.sub, *.hru.\nFUNC_1 : Func Type ( 1 - NSE, 2 - RMSE, 3 - PCC, 4 - Pbias, 5 - KGE, 6 - Mean, 7 - Sum, 8 - Max, 9 - Min )\n\n1 2017 1 1 74.4\n2 2017 1 2 99.4\n3 2017 1 3 77.4\n...\n...\n365 2017 12 31 19.1\n</code></pre> <p>Using a Python script-based environment, we conduct the validation as follows:</p> <pre><code># optima\nX = np.array([-0.236, 14.278, 0.325, 46.604, 1.000, -5.532, 1.611, 0.515, 3.162, 0.010])\n\n# Perform validation\n# `problem.validate_parameters` expects the optimized parameters and the validation file.\n# It returns a dictionary containing two keys: 'objs' (objective values) and 'cons' (constraint violations).\nres = problem.validate_parameters(X, valFile = \"val_op.evl\") \n\n# Print the objective function values from the validation results\nprint(res[\"objs\"])\n</code></pre>"},{"location":"zh/zh/example_runoff_calibration/#postprocessing","title":"Postprocessing","text":"<p>Except for sensitivity analysis and optimization, SWAT-UQ support to extract data from output files.</p> <pre><code>The `series.evl` should be prepared:\nSER_1 : ID of series data\nOBJ_1 : ID of objective function\nWGT_1 : Weight of series combination\nRCH_23  : ID of subbasin to be included in the objective function\nCOL_2 : Column ID of variables in output.rch\nFUNC_10     : Type of objective function (e.g., 1: NSE, 2: RMSE. 3:PCC, 4:Pbias, 5:KGE)\n2012/1/1 to 2016/12/31 : Period for data extraction\n</code></pre> <p>We can extract the data:</p> <pre><code>X = np.array([-0.236, 14.278, 0.325, 46.604, 1.000, -5.532, 1.611, 0.515, 3.162, 0.010])\n\n# Extract the corresponding series data based on the parameter set X\nattr = problem.extract_series(X, seriesFile=\"series.evl\")\n\n# The returned object 'attr' is a Python dictionary.\n# Simulation and observation data are stored separately by function type ('objSeries' or conSeries)objective function ID (objID) and series ID (serID). \n\nsimData = attr['objSeries'][1][1]['sim'] # Simulation data\nobData = attr['objSeries'][1][1]['obs']  # Observation data\n</code></pre>"},{"location":"zh/zh/example_runoff_calibration/#apply-optima-to-project","title":"Apply optima to project","text":"<p>Now, we need to apply these values to the project folder:</p> <pre><code># Optimal parameter values\nX = np.array([-0.236, 14.278, 0.325, 46.604, 1.000, -5.532, 1.611, 0.515, 3.162, 0.010])\n\n# Apply parameters\nproblem.apply_parameters(X, replace=False)  \n# Setting 'replace=False' will apply the values to the working directory (workOriginPath) without modifying the original project files.\n\n# Alternatively\nproblem.apply_parameters(X, replace=True)  \n# Setting 'replace=True' will overwrite the original project folder, which is not recommended.\n</code></pre> <p>So far, the calibration work is completed.</p>"},{"location":"zh/zh/example_runoff_calibration/#exercise-for-users","title":"Exercise for users","text":"<p>We provide an exercise based on the Xinfengjiang sub-basin, which is part of the Dongjiang watershed.</p> <p>You can download the complete project files here: Click here to download project files</p> <p>Within the downloaded project files, the observed data is stored in the file named <code>observed.txt</code>.</p> <p>If you have any questions or need assistance, feel free to contact us.</p>"},{"location":"zh/zh/swat_uq_dev/","title":"SWAT-UQ-DEV \u6a21\u5757","text":""},{"location":"zh/zh/swat_uq_dev/#dev","title":"DEV \u7248\u672c\u6982\u8ff0","text":"<p>SWAT-UQ-DEV \u662f\u4e00\u4e2a\u4e13\u4e3a \u811a\u672c\u5316\u73af\u5883 \u8bbe\u8ba1\u7684 Python \u8f6f\u4ef6\u5305\u3002\u8be5\u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a <code>SWAT_UQ</code> \u7684 Python \u7c7b\uff0c\u7ee7\u627f\u81ea UQPyL \u7684 <code>Problem</code> \u7c7b\u3002\u901a\u8fc7\u5b9e\u4f8b\u5316 <code>SWAT_UQ</code> \u7c7b\uff0c\u7528\u6237\u5373\u53ef\u76f4\u63a5\u8c03\u7528 UQPyL \u63d0\u4f9b\u7684\u5168\u90e8\u65b9\u6cd5\u548c\u7b97\u6cd5\u3002</p> <p>\u6b64\u5916\uff0c<code>SWAT_UQ</code> \u8fd8\u5c01\u88c5\u4e86\u4e00\u7cfb\u5217\u5185\u7f6e\u51fd\u6570\uff0c\u65e8\u5728\u7b80\u5316\u6784\u5efa\u4e0e\u6c42\u89e3\u5b9e\u9645\u95ee\u9898\uff08\u5982\u6a21\u578b\u6821\u51c6\u3001\u6700\u4f73\u7ba1\u7406\u5b9e\u8df5\u7b49\uff09\u7684\u6d41\u7a0b\uff0c\u63d0\u5347\u6548\u7387\u3002</p> <p>SWAT-UQ-DEV \u7279\u522b\u9002\u5408\u5e0c\u671b\u81ea\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7a0b\u3001\u96c6\u6210 UQPyL \u6216\u5176\u4ed6 Python \u5de5\u5177\u7684\u7528\u6237\u3002</p>"},{"location":"zh/zh/swat_uq_dev/#_1","title":"\u4e3b\u8981\u7279\u6027","text":"<ol> <li> <p>\u5e76\u884c\u6267\u884c\uff1a \u65e0\u8bba\u662f\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u7684\u6570\u636e\u8bfb\u5199\uff0c\u8fd8\u662f SWAT \u6a21\u578b\u4eff\u771f\uff0c\u5747\u652f\u6301\u5e76\u884c\u5904\u7406\u3002    \ud83c\udf89 \u5728\u4e00\u53f0 40 \u6838\u670d\u52a1\u5668\u4e0a\u7684\u57fa\u51c6\u6d4b\u8bd5\u8868\u660e\uff0c\u8be5\u4ee3\u7801\u7248\u672c\u53ef\u7a33\u5b9a\u540c\u65f6\u8fd0\u884c 80 \u4e2a SWAT \u5b9e\u4f8b\u3002</p> </li> <li> <p>\u6587\u4ef6\u63a7\u5236\u7b80\u5316\uff1a \u5728\u8fdb\u884c\u5982\u6d41\u91cf\u6216\u6c34\u8d28\u7b49\u6a21\u578b\u6821\u51c6\u4efb\u52a1\u65f6\uff0c\u7528\u6237\u53ea\u9700\u51c6\u5907\u82e5\u5e72 <code>.txt</code> \u6587\u4ef6\uff0c\u5373\u53ef\u5b8c\u6210\u5168\u90e8\u8bbe\u7f6e\u3002</p> </li> <li> <p>\u6d41\u7a0b\u96c6\u6210\u6027\u5f3a\uff1a \u501f\u52a9 UQPyL \u7684\u652f\u6301\uff0c\u7528\u6237\u53ef\u8f7b\u677e\u6267\u884c\u5b8c\u6574\u7684\u5efa\u6a21\u6d41\u7a0b\uff0c\u5305\u62ec\uff1a</p> </li> <li>\u654f\u611f\u6027\u5206\u6790\uff08Sensitivity Analysis\uff09</li> <li>\u53c2\u6570\u4f18\u5316\uff08Optimization\uff09</li> <li>\u6700\u4f18\u53c2\u6570\u53cd\u4ee3\uff08Back-substitution\uff09</li> </ol>"},{"location":"zh/zh/swat_uq_dev/#_2","title":"\u5b89\u88c5\u65b9\u5f0f","text":"<p>\u652f\u6301\u7684 Python \u7248\u672c\uff1a3.6 \u81f3 3.12 \u652f\u6301\u7cfb\u7edf\uff1aWindows\u3001Linux</p> <p>\u63a8\u8350\u5b89\u88c5\u65b9\u5f0f\uff08\u4f7f\u7528 PyPi \u6216 Conda\uff09\uff1a</p> <pre><code>pip install -U swatuq\n</code></pre> <pre><code>conda install swatuq --upgrade\n</code></pre>"},{"location":"zh/zh/swat_uq_dev/#_3","title":"\u5feb\u901f\u5165\u95e8","text":"<p>\u672c\u8282\u5c06\u63d0\u4f9b\u9010\u6b65\u6307\u5357\uff0c\u5e2e\u52a9\u4f60\u901a\u8fc7 SWAT-UQ-DEV \u89e3\u51b3\u57fa\u4e8e SWAT \u7684\u5efa\u6a21\u95ee\u9898\u3002</p>"},{"location":"zh/zh/swat_uq_dev/#_4","title":"\u7b2c\u4e00\u6b65\uff1a\u51c6\u5907\u6587\u4ef6\u4e0e\u76ee\u5f55\u7ed3\u6784","text":"<ol> <li>\u83b7\u53d6\u4e00\u4e2a SWAT \u9879\u76ee\u6587\u4ef6\u5939\uff08\u4ee5\u4e0b\u7b80\u79f0 SWAT Project Folder\uff09\u3002</li> <li>\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684 \u5de5\u4f5c\u6587\u4ef6\u5939\uff08Work Folder\uff09\uff0c\u7528\u4e8e\u5b58\u653e\u63a7\u5236\u6587\u4ef6\u548c\u5e76\u884c\u8fd0\u884c\u65f6\u751f\u6210\u7684\u4e34\u65f6\u6587\u4ef6\u3002</li> <li>\u5728 Work Folder \u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>paras.par</code> \u7684\u53c2\u6570\u6587\u4ef6\uff0c\u5185\u5bb9\u9700\u4e3a UTF-8 \u7f16\u7801\u3002</li> </ol> <p>\u6587\u4ef6\u683c\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>Name Type Mode Min_Max Scope\nCN2 r f -0.4_0.2 all\nGW_DELAY v f 30.0_450.0 all\n...\n</code></pre> <ul> <li>\u53c2\u6570\u540d\u79f0\u9700\u4e0e SWAT \u9879\u76ee\u4e2d\u7684\u540d\u79f0\u4e25\u683c\u4e00\u81f4\u3002</li> <li>\u652f\u6301\u7684\u8d4b\u503c\u65b9\u5f0f\u5305\u62ec\uff1a<ul> <li><code>r</code>\uff1a\u76f8\u5bf9\u8d4b\u503c\uff08\u65b0\u503c = \u539f\u503c \u00d7 (1+val)\uff09</li> <li><code>v</code>\uff1a\u7edd\u5bf9\u8d4b\u503c</li> <li><code>a</code>\uff1a\u52a0\u6cd5\u8d4b\u503c\uff08\u65b0\u503c = \u539f\u503c + val\uff09</li> </ul> </li> <li>\u53c2\u6570\u7c7b\u578b\u53ef\u4e3a\u6574\u6570 (<code>i</code>)\u3001\u6d6e\u70b9\u6570 (<code>f</code>)\u3001\u79bb\u6563 (<code>d</code>)\u3002</li> <li> <p>\u4f5c\u7528\u8303\u56f4\uff08Scope\uff09\u652f\u6301\u5168\u5c40\uff08<code>all</code>\uff09\uff0c\u4e5f\u652f\u6301\u7cbe\u786e\u6307\u5b9a\u5b50\u6d41\u57df\u548c HRU ID\u3002</p> </li> <li> <p>\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>eval.obj</code> \u7684 UTF-8 \u7f16\u7801\u6587\u4ef6\uff0c\u7528\u4e8e\u5b9a\u4e49\u76ee\u6807\u51fd\u6570\u6216\u7ea6\u675f\u51fd\u6570\u3002    \u6587\u4ef6\u5305\u62ec\uff1a</p> </li> <li>\u5934\u90e8\u5b9a\u4e49\u533a\uff08Head Definition\uff09\uff1a \u7528\u4e8e\u58f0\u660e\u6570\u636e\u7cfb\u5217 ID\u3001\u76ee\u6807\u51fd\u6570 ID\u3001\u6743\u91cd\u3001\u8f93\u51fa\u53d8\u91cf\u5217\u53f7\u3001\u8bc4\u4ef7\u6307\u6807\u7c7b\u578b\u7b49\uff1b</li> <li>\u6570\u636e\u533a\uff08Data Section\uff09\uff1a \u4e3a\u5bf9\u5e94\u89c2\u6d4b\u6570\u636e\uff0c\u652f\u6301\u6708\u3001\u65e5\u65f6\u95f4\u5c3a\u5ea6\uff1b</li> </ul> <p>\u652f\u6301\u7684\u8bc4\u4ef7\u6307\u6807\u5305\u62ec\uff1aNSE\u3001RMSE\u3001PCC\u3001Pbias\u3001KGE\u3001\u5747\u503c\u3001\u603b\u548c\u3001\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3002</p>"},{"location":"zh/zh/swat_uq_dev/#_5","title":"\u7f16\u7a0b\u793a\u4f8b","text":"<p>\u4ee5\u4e0b Python \u811a\u672c\u5c55\u793a\u4e86\u5982\u4f55\u5b9a\u4e49\u5e76\u8fd0\u884c\u4e00\u4e2a SWAT-UQ \u95ee\u9898\uff1a</p> <pre><code># First import SWAT_UQ class\nfrom swatuq import SWAT_UQ\n\n# Second define requirement variables:\n\nprojectPath = \"E://swatProjectPath\"  # your SWAT Project Path\nworkPath = \"E://workPath\" # your Work Path\nexeName = \"swat2012.exe\" # the name of swat.exe you want to run\nparaFileName = \"paras.par\" # the parameter file you prepared\nevalFileName = \"eval.obj\" # the evaluation file you prepared\n\nproblem = SWAT_UQ(\n   projectPath = projectPath, # set projectPath\n   workPath = workPath, # set workPath\n   swatExeName = exeName # set swatExeName\n   paraFileName = paraFileName, # set paraFileName\n   evalFileName = evalFileName, # set evalFileName\n   verboseFlag = True, # enable verboseFlag to check if setup is configured properly.\n   numParallel = 2 # set the number of parallels\n)\n\n# The SWAT-related Problem is completed. You can enjoy all methods and algorithms of UQPyL.\n\n#For example:\nfrom UQPyL.optimization.single_objective import GA\n\nga = GA()\nga.run(problem = problem)\n</code></pre> <p>\ud83d\udca1 \u63d0\u793a\uff1a \u66f4\u591a\u5173\u4e8e UQPyL \u7684\u7528\u6cd5\u8be6\u89c1 UQPyL \u4f7f\u7528\u6587\u6863</p>"},{"location":"zh/zh/swat_uq_dev/#_6","title":"\u5e94\u7528\u6700\u4f18\u53c2\u6570","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u5c06\u6700\u4f18\u53c2\u6570\u5e94\u7528\u5230\u539f\u59cb\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\uff0c\u6216\u53ea\u4f5c\u7528\u4e8e\u5de5\u4f5c\u76ee\u5f55\uff1a</p> <pre><code># X should be a list or a NumPy 1D or 2D array\nproblem.apply_parameter(X, replace=False)  # \u5e94\u7528\u4e8e\u5de5\u4f5c\u8def\u5f84\uff0c\u4e0d\u4fee\u6539\u539f\u59cb\u9879\u76ee\nproblem.apply_parameter(X, replace=True)   # \u76f4\u63a5\u5199\u5165\u539f\u59cb SWAT \u9879\u76ee\n</code></pre>"},{"location":"zh/zh/swat_uq_gui/","title":"SWAT-UQ-GUI","text":""},{"location":"zh/zh/swat_uq_gui/#overview-of-gui-version","title":"Overview of GUI Version","text":"<p>\ud83d\udca1 Noted: SWAT-UQ-GUI is still in demo stage (Now, we advise to use SWAT-UQ-DEV). Feel free to give it a try \u2014 the full version is on the way!</p> <p>SWAT-UQ-GUI is designed for parameter uncertainty quantification (UQ) of the SWAT model. Its core functionalities are built upon UQPyL, our public released Python package for UQ. A key advantage of this platform is that users do not need to worry about coding. It seamlessly automates complete workflow from sensitivity analysis to parameter optimization, result checking, finally data visualization.</p> <p> </p> <p>Figure 1. Get Start Card</p> <p>SWAT-UQ-GUI consists of three modules corresponding to preparation, execution, and post-processing.  As Figure 1 shows, preparation involves Parameter Setting, Objective Define; Execution includes Sensibility Analysis, Problem Optimization, Result Validation &amp; Apply; Post-processing provide interface for histogram (Visualization A) and point-line figure (Visualization B).</p>"},{"location":"zh/zh/swat_uq_gui/#key-features","title":"Key Features","text":"<p>End-to-end visualization: SWAT-UQ-GUI supports fully visualized operations across the entire workflow \u2014 from problem definition and sensitivity analysis to optimization and final result validation.</p> <p>Modular &amp; Extensible Architecture: SWAT-UQ-GUI adopts a modular structure that's easy to extend \u2014 new methods and tools can be integrated without disrupting existing workflows.</p>"},{"location":"zh/zh/swat_uq_gui/#quick-start","title":"Quick Start","text":"<p>Here, we provide a Quick Start. In future plans, we will provide detailed documentation and videos.</p> <p>Please choose the latest release version of SWAT-UQ.</p> <p>Demo Version has been released: SWAT-UQ</p> <p>Step1: On the Get Started interface, click the New Project card to create a project or the Open Project card to open an existing one. You can also select the Example card for reference cases or the Help card for assistance.</p> <p> </p> <p>Figure 2. New Project Card and Open Project Card</p> <p>For the New Project Card (left picture of Figure 2), users need to provide the following information: the UQ Project name, the UQ Project path, and the SWAT Project path. After these inputs are provided, the program will verify the validity of the SWAT project files. If the verification is successful, other modules will be activated. Once the UQ Project is created, a project file named *.prj (where * represents the UQ Project name set by the user) will be saved in the specified UQ Project path.  </p> <p>For the Open Project Card (right picture of Figure 2), users should select the folder that contains *.prj files. SWAT-UQ will then check the validity of the project file before proceeding.  </p> <p>Step2: On the Parameter Setting and Objective Definition, the parameter file (.par) and the objective file (.obj) should be created. These files are crucial as they specify which parameters will be modified and what objectives will be evaluated by the program.</p> <p> </p> <p>Figure 3. Parameter Setting Card and Figure 4. Objective Define Card</p> <p>To be specific, as shown in Figure 3, the Parameter Setting Card enables users to define the parameters they wish to tune. There are two ways to add parameters to the information table: either by importing them from an existing file or by clicking the Add button to open the Parameter Selection widget. In this table, all selectable parameters are organized by the suffix of the SWAT project files. Additionally, the search bar provides a convenient way to locate specific parameters quickly.</p> <p></p> <p>Figure 4. Parameter Setting Table </p> <p>After adding parameters, users can set the tuning mode, lower and upper bounds, and specify tuning files (default: all) for each parameter (Figure 3 shows). Finally, these settings should be saved to the UQ project folder by clicking \"Saving Current Parameter\" button.</p> <p>There are also two ways to define the objective function: by importing from existing files or by user definition. For user definition, you should click \"Add\" button. </p> <p></p> <p>Figure 5. Objective Define Table </p> <p>As shown in Figure 5, users need to accurately fill in the objective ID, series ID, objective type, variable type, weight, and other relevant information. It is important to note that both the series ID and objective ID can be repeated, allowing for combinations of multiple series or weighted combinations of series. For more details, please refer to the comprehensive documentation.</p> <p>After defining objectives, you can save them to the objective file. It is also allowed to define multiple objective functions within a single file.</p> <p>Step3: Perform sensitivity analysis or parameter optimization as needed. </p> <p>Using Sensitivity Analysis as an example, as shown in the left image of Figure 6, users should first select the parameter file and objective file. Next, they choose the desired sensitivity analysis method and sampling technique. Users can then configure additional settings as required, fine-tuning the hyper-parameters to best meet project needs before proceeding. SWAT-UQ thoughtfully displays the number of parameters and the total sample size to assist users in making informed decisions.</p> <p>Once all initial settings are all ready, click the \"Next\" button to proceed to the simulation and analysis process. The right image of Figure 6 displays the settings of simulation, including the selection of SWAT executable file, parallel numbers and problem name. Finally, click the \"Initialize,\" \"Sampling,\" and \"Simulation\" buttons in sequence, and wait for simulation completing. SWAT-UQ can display the simulation progress in real-time, and users can also pause it to reconfigure settings. It would save the analysis result into UQ project folder (./Result/data/). The result file would be used to check or draw visualization picture.</p> <p> </p> <p> Figure 6. Sensibility Analysis Interface </p> <p>For parameter optimization, users should still select parameter file and objective file at first. When users check more than two objectives, the multi-objective optimization would be activated; conversely, if only one objective is selected, single-objective optimization is used. After fine-tuning hyper-parameters, the optimization process would be started, like sensibility analysis. SWAT-UQ can display the optimization progress in real-time, along with the optimal parameter values for each iteration.</p> <p> </p> <p> Figure 7. Parameter Optimization Interface </p> <p>Here, we list the available sensibility analysis method and optimization method.</p> <p>Sensibility Analysis: - Sobol' - Delta Test (DT) #TODO - Extended Fourier Amplitude Sensitivity Test (eFAST) - Random Balance Designs - Fourier Amplitude Sensitivity Test (RBD-FAST) - Multivariate Adaptive Regression Splines-Sensitivity Analysis (MARS-SA) #TODO - Morris - Regional Sensitivity Analysis (RSA)</p> <p>Optimization Algorithm: ( indicates solving computational expensive optimization problem) - Single Objective Optimization: SCE-UA, ML-SCE-UA, GA, CSA, PSO, DE, ABC, ASMO (#TODO), EGO (#TODO) - Multi-Objective Optimization: MOEA/D, NSGA-II, RVEA, MOASMO (#TODO)</p> <p>Step 4: Result Validation and Apply. On Result Validation &amp; Apply interface, SWAT-UQ allows users to simulate a specific set of parameters individually and extract the desired time series data, or apply the optimal parameters directly to the SWAT project files. This parameter set can be user-defined or sourced from completed optimization result files.</p> <p></p> <p> Figure 8. Result Validation Interface </p> <p>Step 5: Result Visualization. The current SWAT-UQ provides two types of plot pictures: a bar chart for sensitivity analysis (Visualization A Interface) and an iteration convergence plot for parameter optimization (Visualization B Interface). Of course, additional types of plots will be continuously added in future versions. Figures 9 and 10 shows the visualization pictures from two interfaces.</p> <p></p> <p> Figure 9. Sensibility Analysis Visualization </p> <p></p> <p> Figure 10. Optimization Visualization </p> <p>Specifically, On the Visualization A and Visualization B, user can select the result file. SWAT-UQ would generates initial visualizations. Users can click the \"Config\" button to open the settings panel and tune various parameters of the plot based on the preset values, as Figure 11 indicates.</p> <p> </p> <p> Figure 11. Visualization Interface </p> <p>This concludes the Quick Start section for SWAT-UQ. For more advanced operations, please refer to the documentation.</p>"}]}